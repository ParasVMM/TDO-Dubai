{"version":3,"file":"static/js/7167.554f24dd.chunk.js","mappings":"+RAQA,MA8QA,EA9Q0BA,KACxB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IAEtCC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,OAChDG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,OACpCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,OA+DrCO,EAAAA,EAAAA,YAAU,MA7DVC,iBACE,IACE,MAAMC,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBC,QAAYC,EAAAA,EAAMC,IAAIC,EAAAA,GAAY,uBAAwB,CAC9DC,QAAS,CAAC,cAAgB,UAADC,OAAYR,MAGpB,MAAfG,EAAIM,SACFN,EAAIO,KAAKC,OACXC,EAAAA,EAAAA,IAAWT,EAAIO,KAAKG,SAGpBpB,EAAmBU,EAAIO,KAAKI,WAGlC,CAAE,MAAOC,IACPH,EAAAA,EAAAA,IAAWG,EAAEF,QACf,CACF,EA4CEG,GAAsBC,OA1CxBlB,iBACE,IACE,MAAMC,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBC,QAAYC,EAAAA,EAAMC,IAAIC,EAAAA,GAAY,mBAAoB,CAC1DC,QAAS,CAAC,cAAgB,UAADC,OAAYR,MAGpB,MAAfG,EAAIM,SACFN,EAAIO,KAAKC,OACXC,EAAAA,EAAAA,IAAWT,EAAIO,KAAKG,SAGpBlB,EAAaQ,EAAIO,KAAKI,WAG5B,CAAE,MAAOC,IACPH,EAAAA,EAAAA,IAAWG,EAAEF,QACf,CACF,CAyBEK,GAAgBD,OAvBlBlB,iBACE,IACE,IAAIC,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBiB,EAAMb,EAAAA,GAAY,uBAElBH,QAAYC,EAAAA,EAAMC,IAAIc,EAAK,CAC7BZ,QAAS,CAAC,cAAgB,UAADC,OAAYR,MAGvC,GAAmB,MAAfG,EAAIM,SAAmBN,EAAIO,KAAKC,MAAO,CACzC,IAAIS,EAAejB,EAAIO,KAAKI,UAAUO,QAAOC,GAASA,EAAMC,WAE5D1B,EAAUuB,GAEVI,YAAW,IAAMlC,GAAc,IAAO,IACxC,CACF,CAAE,MAAOyB,IACPH,EAAAA,EAAAA,IAAWG,EAAEF,QACf,CACF,CAKEY,GAAcR,MAAM,GACnB,IAEH,MAAM,SACJS,EAAQ,aACRC,EACAC,WAAW,OAACC,GAAO,MACnBC,IACEC,EAAAA,EAAAA,MA2BJ,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAAAF,SAAA,EACJF,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAACC,UAAU,iBAAgBJ,UACrCC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKJ,SAAA,EAClBF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,WAAUJ,UACvBF,EAAAA,EAAAA,KAAA,MAAIM,UAAU,qBAAoBJ,SAAC,2BAGrCF,EAAAA,EAAAA,KAAA,OAAKM,UAAU,uBAAsBJ,UACnCC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACC,GAAG,iBAAiBF,UAAU,4BAA2BJ,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,KAAGM,UAAU,2BAA6B,mBAMlDN,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,SACP7C,IACC2C,EAAAA,EAAAA,KAAA,QAAMU,SAAUf,GA5C1B5B,eAAwBW,GACtB,IACE,IAAIV,GAAQC,EAAAA,EAAAA,IAAeC,EAAAA,IACvBiB,EAAMb,EAAAA,GAAY,qBAElBH,QAAYC,EAAAA,EAAMuC,KAAKxB,EAAKT,EAAM,CACpCH,QAAS,CACP,cAAgB,UAADC,OAAYR,GAC3B,eAAgB,sBAID,MAAfG,EAAIM,SACFN,EAAIO,KAAKC,OACXC,EAAAA,EAAAA,IAAWT,EAAIO,KAAKG,UAEpBiB,KACAc,EAAAA,EAAAA,IAAazC,EAAIO,KAAKG,UAG5B,CAAE,MAAOE,IACPH,EAAAA,EAAAA,IAAWG,EAAEF,QACf,CACF,IAqBiDqB,UACrCC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKJ,SAAA,EAElBC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,kBAAiBX,SAAC,sBACjCC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,kBAAkBC,GAAG,kBAAkBT,UAAU,iBAClDZ,EAAS,kBAAmB,CAACsB,SAAU,sBAAqBd,SAAA,EACtEF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,4BAChB1C,GAAmBA,EAAgB0D,OAAS,IAAKf,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EAChDF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,MAAKf,SAAC,QACnB1C,EAAgB2D,KAAIC,IACnBpB,EAAAA,EAAAA,KAAA,UAA6BiB,MAAOG,EAAEC,aAAanB,SAAEkB,EAAEC,cAA1CD,EAAEC,uBAKrBrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,kBACrBS,OAAQC,IAAA,IAAC,QAAC3C,GAAQ2C,EAAA,OAAKxB,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,WAAUX,SAAC,eAC1BC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,WAAWC,GAAG,WAAWT,UAAU,iBACpCZ,EAAS,WAAY,CAACsB,SAAU,sBAAqBd,SAAA,EAC/DF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,YACjBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,MAAKf,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,WAAUf,SAAC,cACzBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,gBAAef,SAAC,sBAGhCF,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,WACrBS,OAAQE,IAAA,IAAC,QAAC5C,GAAQ4C,EAAA,OAAKzB,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,YAAWX,SAAC,gBAC3BC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,YAAYC,GAAG,YAAYT,UAAU,iBACtCZ,EAAS,YAAa,CAACsB,SAAU,sBAAqBd,SAAA,EAChEF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,WAChBxC,GAAaA,EAAUwD,OAAS,IAAKf,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,MAAKf,SAAC,QACnBxC,EAAUyD,KAAIC,IACbpB,EAAAA,EAAAA,KAAA,UAAqBiB,MAAOG,EAAEN,KAAKZ,SAAEkB,EAAEN,MAA1BM,EAAEN,eAKrBd,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,YACrBS,OAAQG,IAAA,IAAC,QAAC7C,GAAQ6C,EAAA,OAAK1B,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,SAAQX,SAAC,YACxBC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,SAASC,GAAG,SAAST,UAAU,iBAChCZ,EAAS,SAAU,CAACsB,SAAU,sBAAqBd,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,WAChBtC,GAAUA,EAAOsD,OAAS,IAAKf,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,MAAKf,SAAC,QACnBtC,EAAOuD,KAAIC,IACVpB,EAAAA,EAAAA,KAAA,UAA0BiB,MAAOG,EAAEO,UAAUzB,SAAEkB,EAAEQ,aAApCR,EAAEO,oBAKrB3B,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,SACrBS,OAAQM,IAAA,IAAC,QAAChD,GAAQgD,EAAA,OAAK7B,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,aAAYX,SAAC,iBAC5BC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,aAAaC,GAAG,aAAaT,UAAU,iBACxCZ,EAAS,aAAc,CAACsB,SAAU,sBAAqBd,SAAA,EACjEF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,YACjBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,MAAKf,SAAC,SACpBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,OAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,OAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,OAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,OAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,OAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,UAGpBF,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,aACrBS,OAAQO,IAAA,IAAC,QAACjD,GAAQiD,EAAA,OAAK9B,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,aAAYX,SAAC,iBAC5BC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,aAAaC,GAAG,aAAaT,UAAU,iBACxCZ,EAAS,aAAc,CAACsB,SAAU,sBAAqBd,SAAA,EACjEF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,YACjBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,WAClBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,IAAGf,SAAC,mBAGpBF,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,aACrBS,OAAQQ,IAAA,IAAC,QAAClD,GAAQkD,EAAA,OAAK/B,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,eAAcX,SAAC,mBAC9BF,EAAAA,EAAAA,KAAA,SAAOgC,KAAK,OAAO1B,UAAU,eAAeS,GAAG,eAAeD,KAAK,kBACxDpB,EAAS,eAAgB,CAC3BsB,SAAU,oBACViB,QAAS,CACPhB,MAAO,WACPpC,QAAS,kCAIpBmB,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,eACrBS,OAAQW,IAAA,IAAC,QAACrD,GAAQqD,EAAA,OAAKlC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAI/EsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SAAOa,QAAQ,YAAWX,SAAC,gBAC3BC,EAAAA,EAAAA,MAAA,UAAQW,KAAK,YAAYC,GAAG,YAAYT,UAAU,iBACtCZ,EAAS,YAAa,CAACsB,SAAU,sBAAqBd,SAAA,EAChEF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,GAAEf,SAAC,YACjBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,QAAOf,SAAC,WACtBF,EAAAA,EAAAA,KAAA,UAAQiB,MAAM,mBAAkBf,SAAC,2BAGnCF,EAAAA,EAAAA,KAACsB,EAAAA,EAAY,CAACzB,OAAQA,EAAQiB,KAAK,YACrBS,OAAQY,IAAA,IAAC,QAACtD,GAAQsD,EAAA,OAAKnC,EAAAA,EAAAA,KAAA,KAAGM,UAAU,cAAaJ,SAAErB,GAAY,QAG/EmB,EAAAA,EAAAA,KAAA,OAAKM,UAAU,SAAQJ,UACrBF,EAAAA,EAAAA,KAAA,UAAQM,UAAU,uBAAsBJ,SAAC,wBAOpD,C,6DC/QDkC,EAAe,SAAAA,GAAA,IAQnBC,EAAAD,EAAAE,GACAC,EAAAH,EAAAvC,OACA2C,EAAAJ,EAAAtB,KACA2B,EAAAL,EAAAvD,QACA6D,EAAAN,EAAAb,OACGoB,EAAA,SAAA5D,EAAA6D,GAAA,SAAA7D,EAAA,aAAA8D,EAAAT,EAAAC,EAAA,GAAAE,EAAAO,OAAAC,KAAAhE,GAAA,IAAAqD,EAAA,EAAAA,EAAAG,EAAArB,OAAAkB,IAAAQ,EAAAI,QAAAH,EAAAN,EAAAH,KAAA,IAAAC,EAAAQ,GAAA9D,EAAA8D,IAAA,OAAAR,CAAA,EAAAD,EAAA,2CAEGa,GAAUL,EAAAA,EAAAA,MACVM,GAAQL,EAAAA,EAAAA,IAAIN,GAAUU,EAAQrD,UAAUC,OAAQ2C,GAEtD,IAAKU,EACH,OAAO,KAGT,IAAiBC,EAA+BD,EAAxCrE,QAA8BuE,EAAUF,EAAVG,MAChCC,EAAQR,OAAOS,OAAO,CAAC,EAAGZ,EAAM,CACpCzC,SAAUiD,GAAuBV,IAGnC,OAAO1D,EAAAA,eAAqBsD,GACxBtD,EAAAA,aAAmBsD,EAAIiB,GACvBZ,EACCA,EAAO,CACN7D,QAASsE,GAAuBV,EAChCe,SAAUJ,IAEZrE,EAAAA,cAAqBsD,GAAiBtD,EAAAA,SAAgBuE,EAAA,C","sources":["views/hotels/CreateHotelMarkup.js","../node_modules/@hookform/error-message/src/ErrorMessage.tsx"],"sourcesContent":["import {CCard, CCardBody, CCardHeader} from \"@coreui/react\";\nimport {Link} from \"react-router-dom\";\nimport React, {useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport {ErrorMessage} from \"@hookform/error-message\"\nimport {errorToast, getCookieValue, ipAddress, successToast, tokenName} from \"../../utils/Common\";\nimport axios from \"axios\";\n\nconst CreateHotelMarkup = () => {\n  const [renderForm, setRenderForm] = useState(false);\n\n  const [serviceProvider, setServiceProvider] = useState(null);\n  const [userGroup, setUserGroup] = useState(null);\n  const [agency, setAgency] = useState(null)\n\n  async function ReadServiceProvider() {\n    try {\n      const token = getCookieValue(tokenName);\n      const res = await axios.get(ipAddress + \"admin/hotel-supplier\", {\n        headers: {'Authorization': `Bearer ${token}`,}\n      });\n\n      if (res.status === 200) {\n        if (res.data.error) {\n          errorToast(res.data.message);\n        } else {\n          // console.log(res.data.recordset);\n          setServiceProvider(res.data.recordset);\n        }\n      }\n    } catch (e) {\n      errorToast(e.message);\n    }\n  }\n\n  async function ReadUserGroup() {\n    try {\n      const token = getCookieValue(tokenName);\n      const res = await axios.get(ipAddress + \"admin/user-group\", {\n        headers: {'Authorization': `Bearer ${token}`,}\n      });\n\n      if (res.status === 200) {\n        if (res.data.error) {\n          errorToast(res.data.message);\n        } else {\n          // console.log(res.data.recordset);\n          setUserGroup(res.data.recordset);\n        }\n      }\n    } catch (e) {\n      errorToast(e.message);\n    }\n  }\n\n  async function FetchAgency() {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/getCompanyName\";\n\n      let res = await axios.get(url, {\n        headers: {'Authorization': `Bearer ${token}`}\n      });\n\n      if (res.status === 200 && !res.data.error) {\n        let activeAgents = res.data.recordset.filter(agent => agent.IsActive);\n        // console.log(activeAgents);\n        setAgency(activeAgents);\n\n        setTimeout(() => setRenderForm(true), 100);\n      }\n    } catch (e) {\n      errorToast(e.message);\n    }\n  }\n\n  useEffect(() => {\n    ReadServiceProvider().then();\n    ReadUserGroup().then();\n    FetchAgency().then();\n  }, []);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset\n  } = useForm();\n\n  async function onSubmit(data) {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/hotel-markup\";\n\n      let res = await axios.post(url, data, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        }\n      });\n\n      if (res.status === 200) {\n        if (res.data.error) {\n          errorToast(res.data.message);\n        } else {\n          reset();\n          successToast(res.data.message);\n        }\n      }\n    } catch (e) {\n      errorToast(e.message);\n    }\n  }\n\n  return (\n    <>\n      <CCard>\n        <CCardHeader className=\"card-header-bg\">\n          <div className=\"row\">\n            <div className=\"col-md-8\">\n              <h4 className=\"mb-0 primary-color\">Create Hotel Markup</h4>\n            </div>\n\n            <div className=\"col-md-4 text-md-end\">\n              <Link to=\"/hotel-markups\" className=\"btn btn-outline-dark px-5\">\n                <i className=\"fa-solid fa-arrow-left\"></i> Back\n              </Link>\n            </div>\n          </div>\n        </CCardHeader>\n\n        <CCardBody>\n          {renderForm &&\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"row\">\n                {/* Service Provider */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"ServiceProvider\">Service Provider</label>\n                  <select name=\"ServiceProvider\" id=\"ServiceProvider\" className=\"form-select\"\n                          {...register(\"ServiceProvider\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select Service Provider</option>\n                    {serviceProvider && serviceProvider.length > 0 && <>\n                      <option value=\"All\">All</option>\n                      {serviceProvider.map(x =>\n                        <option key={x.SupplierName} value={x.SupplierName}>{x.SupplierName}</option>\n                      )}\n                    </>}\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"ServiceProvider\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Trip Type */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"TripType\">Trip Type</label>\n                  <select name=\"TripType\" id=\"TripType\" className=\"form-select\"\n                          {...register(\"TripType\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    <option value=\"All\">All</option>\n                    <option value=\"Domestic\">Domestic</option>\n                    <option value=\"International\">International</option>\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"TripType\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Agent Type */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"AgentType\">Agent Type</label>\n                  <select name=\"AgentType\" id=\"AgentType\" className=\"form-select\"\n                          {...register(\"AgentType\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    {userGroup && userGroup.length > 0 && <>\n                      <option value=\"All\">All</option>\n                      {userGroup.map(x =>\n                        <option key={x.name} value={x.name}>{x.name}</option>\n                      )}\n                    </>}\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"AgentType\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Agency */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"Agency\">Agency</label>\n                  <select name=\"Agency\" id=\"Agency\" className=\"form-select\"\n                          {...register(\"Agency\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    {agency && agency.length > 0 && <>\n                      <option value=\"All\">All</option>\n                      {agency.map(x =>\n                        <option key={x.CompanyId} value={x.CompanyId}>{x.CompanyName}</option>\n                      )}\n                    </>}\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"Agency\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Star Rating */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"StarRating\">Star Rating</label>\n                  <select name=\"StarRating\" id=\"StarRating\" className=\"form-select\"\n                          {...register(\"StarRating\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    <option value=\"All\">All</option>\n                    <option value=\"0\">0</option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"StarRating\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Markup Type */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"MarkupType\">Markup Type</label>\n                  <select name=\"MarkupType\" id=\"MarkupType\" className=\"form-select\"\n                          {...register(\"MarkupType\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    <option value=\"F\">Fixed</option>\n                    <option value=\"P\">Percentage</option>\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"MarkupType\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Markup Amount */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"MarkupAmount\">Markup Amount</label>\n                  <input type=\"text\" className=\"form-control\" id=\"MarkupAmount\" name=\"MarkupAmount\"\n                         {...register(\"MarkupAmount\", {\n                           required: \"This is required.\",\n                           pattern: {\n                             value: /^[0-9]+$/,\n                             message: \"Only numbers are allowed.\"\n                           }\n                         })}/>\n\n                  <ErrorMessage errors={errors} name=\"MarkupAmount\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                {/* Applied On */}\n                <div className=\"col-md-3 mb-3\">\n                  <label htmlFor=\"AppliedOn\">Applied On</label>\n                  <select name=\"AppliedOn\" id=\"AppliedOn\" className=\"form-select\"\n                          {...register(\"AppliedOn\", {required: \"This is required.\"})}>\n                    <option value=\"\">Select</option>\n                    <option value=\"Total\">Total</option>\n                    <option value=\"PerRoom/PerNight\">Per Room/Per Night</option>\n                  </select>\n\n                  <ErrorMessage errors={errors} name=\"AppliedOn\"\n                                render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n                </div>\n\n                <div className=\"col-12\">\n                  <button className=\"btn btn-primary px-5\">Create</button>\n                </div>\n              </div>\n            </form>\n          }\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\nexport default CreateHotelMarkup\n","import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"],"names":["CreateHotelMarkup","renderForm","setRenderForm","useState","serviceProvider","setServiceProvider","userGroup","setUserGroup","agency","setAgency","useEffect","async","token","getCookieValue","tokenName","res","axios","get","ipAddress","headers","concat","status","data","error","errorToast","message","recordset","e","ReadServiceProvider","then","ReadUserGroup","url","activeAgents","filter","agent","IsActive","setTimeout","FetchAgency","register","handleSubmit","formState","errors","reset","useForm","_jsx","_Fragment","children","_jsxs","CCard","CCardHeader","className","Link","to","CCardBody","onSubmit","post","successToast","htmlFor","name","id","required","value","length","map","x","SupplierName","ErrorMessage","render","_ref","_ref2","_ref3","CompanyId","CompanyName","_ref4","_ref5","_ref6","type","pattern","_ref7","_ref8","s","t","as","a","m","o","i","l","r","n","Object","keys","indexOf","f","c","g","u","types","d","assign","messages"],"sourceRoot":""}