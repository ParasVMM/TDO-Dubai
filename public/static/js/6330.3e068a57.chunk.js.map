{"version":3,"file":"static/js/6330.3e068a57.chunk.js","mappings":"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","sources":["views/widgets/WidgetsHotelAllotMarkups.js","views/hotels/HotelAllotMarkups.js","../node_modules/react-bootstrap/esm/Container.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import {CCol, CRow, CWidgetStatsA} from \"@coreui/react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Table from \"react-bootstrap/Table\";\nimport React, {useEffect, useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\nimport {getCookieValue, ipAddress, tokenName} from \"../../utils/Common\";\nimport axios from \"axios\";\n\nconst WidgetsHotelAllotMarkups = () => {\n\n  let {register, handleSubmit, reset, formState: {errors}} = useForm();\n  const [show, setShow] = useState(false);\n  const [selectedPlanEmails, setSelectedPlanEmails] = useState([]);\n  const [selectedPlanName, setSelectedPlanName] = useState('');\n  const [selectedMarkupType, setSelectedMarkupType] = useState('');\n  const [selectedMarkupValue, setSelectedMarkupValue] = useState('');\n  const [selectedCancleCharge, setSelectedCancleCharge] = useState('');\n  const [selectedReschedulingCharges, setReschedulingCharges] = useState('');\n  const [selectedSuppliers, setSelectedSuppliers] = useState('');\n\n\n  let [loader, setLoader] = useState(true)\n\n  const handleClose = () => setShow(false);\n\n  const handleShow2 = (group) => {\n    console.log(group)\n  }\n\n  const handleShow = (planName, type, value) => {\n    let filter = data.filter(x => x.planName === planName);\n    console.log(filter);\n\n    // Extract unique suppliers\n    let uniqueSuppliers = [...new Set(filter.map(item => item.supplier))].join(', ');\n\n    // Group by agent email and supplier to ensure uniqueness\n    let uniqueEntries = Array.from(new Map(filter.map(item => [item.agentEmail, item])).values());\n\n    setSelectedPlanName(planName);\n    setSelectedPlanEmails(uniqueEntries);\n    setSelectedMarkupType(type);\n    setSelectedMarkupValue(value);\n    setSelectedSuppliers(uniqueSuppliers);\n    setShow(true);\n  };\n\n\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    viewMarkupAllotedToAgents();\n  }, []);\n\n  function viewMarkupAllotedToAgents() {\n    let token = getCookieValue(tokenName);\n    // console.log(token)\n    axios.get(ipAddress + \"admin/hotel-view_markup_details\", {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content_Type': 'application-json',\n      }\n    }).then((response) => {\n      console.log(response.data);\n      setData(response.data.recordset);\n      setLoader(false);\n    }).catch(e => {\n      console.log(e)\n      setLoader(false);\n    })\n  }\n\n  return (\n    <>\n      {\n        loader ?\n          <div>\n            <span className=\"spinner-border text-primary\"></span>\n          </div>\n          :\n          <>\n            <CRow>\n              {data?.length > 0 && Object.values(\n                data.reduce((acc, item) => {\n                  if (!acc[item.planName]) {\n                    acc[item.planName] = [];\n                  }\n                  acc[item.planName].push(item);\n                  return acc;\n                }, {})\n              ).map((group, index) => (\n                <CCol key={index} sm={6} lg={3}>\n                  <CWidgetStatsA\n                    style={{height: '87px'}}\n                    className=\"mb-4\"\n                    color={index % 6 === 0 ? 'primary' : index % 6 === 1 ? 'danger' : index % 6 === 2 ? 'warning' : index % 6 === 3 ? 'success' : index % 6 === 4 ? 'secondary' : 'info'}\n                    value={\n                      <>\n                        <span style={{fontSize: \"smaller\"}}  >{group[0].planName}</span>\n                        {/*<CIcon icon={cilNotes} style={{height: '28px'}} customClassName=\"nav-icon\" />*/}\n                        {/*<CountUp start={0} end={100} useIndianSeparators={true} />*/}\n                        {/*{numberOfInsurance}{' '}*/}\n                        {/*<span className=\"fs-6 fw-normal\">*/}\n                        {/*  (-12.4% <CIcon icon={cilArrowBottom} />)*/}\n                        {/*</span>*/}\n                      </>\n                    }\n                    title={`Status: ${group[0].status}`}\n                    action={\n                      <Button className=\"btn btn-sm\"\n                              onClick={() => handleShow(group[0].planName, group[0].markupType, group[0].markupValue)}\n                              variant=\"info\">Get Info</Button>\n\n                      // <CDropdown alignment=\"end\">\n                      //   <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                      //     <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n                      //   </CDropdownToggle>\n                      //   <CDropdownMenu>\n                      //     <CDropdownItem>Action</CDropdownItem>\n                      //     <CDropdownItem>Another action</CDropdownItem>\n                      //     <CDropdownItem>Something else here...</CDropdownItem>\n                      //     <CDropdownItem disabled>Disabled action</CDropdownItem>\n                      //   </CDropdownMenu>\n                      // </CDropdown>\n                    }\n\n                  />\n                </CCol>\n\n              ))\n              }\n\n              {/*<CCol sm={6} lg={3}>*/}\n              {/*  <CWidgetStatsA*/}\n              {/*    className=\"mb-4\"*/}\n              {/*    color=\"primary\"*/}\n              {/*    value={*/}\n              {/*      <>*/}\n              {/*        <CIcon icon={cilNotes} style={{ height: '28px' }} customClassName=\"nav-icon\" />*/}\n              {/*        {' '}*/}\n              {/*        <CountUp start={0} end={numberOfInsurance} useIndianSeparators={true} />*/}\n              {/*      </>*/}\n              {/*    }*/}\n              {/*    title=\"Total Insurance\"*/}\n              {/*    action={*/}\n              {/*      <div>*/}\n              {/*        <Button variant=\"danger\">Get Info</Button>*/}\n              {/*        <CDropdown alignment=\"end\">*/}\n              {/*          <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">*/}\n              {/*            <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />*/}\n              {/*          </CDropdownToggle>*/}\n              {/*          <CDropdownMenu>*/}\n              {/*            <CDropdownItem>Action</CDropdownItem>*/}\n              {/*            <CDropdownItem>Another action</CDropdownItem>*/}\n              {/*            <CDropdownItem>Something else here...</CDropdownItem>*/}\n              {/*            <CDropdownItem disabled>Disabled action</CDropdownItem>*/}\n              {/*          </CDropdownMenu>*/}\n              {/*        </CDropdown>*/}\n              {/*      </div>*/}\n              {/*    }*/}\n              {/*    chart={*/}\n              {/*      <CChartLine*/}\n              {/*        className=\"mt-3 mx-3\"*/}\n              {/*        style={{ height: '70px' }}*/}\n              {/*        data={{*/}\n              {/*          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],*/}\n              {/*          datasets: [*/}\n              {/*            {*/}\n              {/*              label: 'My First dataset',*/}\n              {/*              backgroundColor: 'transparent',*/}\n              {/*              borderColor: 'rgba(255,255,255,.55)',*/}\n              {/*              pointBackgroundColor: getStyle('--cui-primary'),*/}\n              {/*              data: [65, 59, 84, 84, 51, 55, 40],*/}\n              {/*            },*/}\n              {/*          ],*/}\n              {/*        }}*/}\n              {/*        options={{*/}\n              {/*          plugins: {*/}\n              {/*            legend: {*/}\n              {/*              display: false,*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          maintainAspectRatio: false,*/}\n              {/*          scales: {*/}\n              {/*            x: {*/}\n              {/*              grid: {*/}\n              {/*                display: false,*/}\n              {/*                drawBorder: false,*/}\n              {/*              },*/}\n              {/*              ticks: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*            },*/}\n              {/*            y: {*/}\n              {/*              min: 30,*/}\n              {/*              max: 89,*/}\n              {/*              display: false,*/}\n              {/*              grid: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*              ticks: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          elements: {*/}\n              {/*            line: {*/}\n              {/*              borderWidth: 1,*/}\n              {/*              tension: 0.4,*/}\n              {/*            },*/}\n              {/*            point: {*/}\n              {/*              radius: 4,*/}\n              {/*              hitRadius: 10,*/}\n              {/*              hoverRadius: 4,*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          events: ['none'],*/}\n              {/*        }}*/}\n              {/*      />*/}\n              {/*    }*/}\n              {/*  />*/}\n              {/*</CCol>*/}\n            </CRow>\n\n            <Modal show={show} onHide={handleClose} centered size=\"lg\">\n              <Modal.Header closeButton>\n                <Container>\n                  <Row>\n                    <Modal.Title>{selectedPlanName}</Modal.Title>\n                  </Row>\n                  <span>( <b>Type:</b> {selectedMarkupType}</span>{' | '}\n                  <span><b>Value:</b> {selectedMarkupValue}</span>{' | '}\n                  <span><b>Suppliers:</b> {selectedSuppliers}</span>)\n                </Container>\n              </Modal.Header>\n\n              <Modal.Body>\n\n                <form>\n                  <div className=\"row\">\n                    <br/>\n                    <div style={{height: \"180px\"}} className=\"table-responsive\">\n                      <Table responsive hover>\n                        <thead style={{position: \"sticky\", top: 0}}>\n                        <tr>\n                          <th>ID</th>\n                          <th>Agent</th>\n                          <th>Name</th>\n                          <th>Contact</th>\n                        </tr>\n                        </thead>\n\n                        <tbody>\n\n                        {selectedPlanEmails.map((item, index) => (\n                          <tr key={index}>\n                            <td>{index + 1}</td>\n                            <td>{item.agentEmail}</td>\n                            <td>{item.FirstName}{' '}{item.LastName}</td>\n                            <td>{item.PhoneNumber}</td>\n                          </tr>\n                        ))}\n\n\n                        </tbody>\n\n\n                      </Table>\n\n                    </div>\n\n                  </div>\n\n                  <hr/>\n\n                  <div className=\"mb d-flex justify-content-between align-items-center\">\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                    </Button>\n                  </div>\n\n\n                </form>\n\n              </Modal.Body>\n\n              {/*<Modal.Footer>*/}\n              {/*  <Button variant=\"secondary\" onClick={handleClose}>*/}\n              {/*    Close*/}\n              {/*  </Button>*/}\n              {/*  <Button variant=\"primary\" onSubmit={handleSubmit(onSubmit)} >*/}\n              {/*    Save Changes*/}\n              {/*  </Button>*/}\n              {/*</Modal.Footer>*/}\n\n            </Modal>\n\n          </>\n      }\n    </>\n  )\n  }\n\n  export default WidgetsHotelAllotMarkups\n","import {useForm} from \"react-hook-form\";\nimport React, {useEffect, useState} from \"react\";\nimport {errorToast, getCookieValue, ipAddress, successToast, tokenName} from \"../../utils/Common\";\nimport axios from \"axios\";\nimport {CCard, CCardBody, CCardHeader} from \"@coreui/react\";\nimport Select from \"react-select\";\nimport Button from \"react-bootstrap/Button\";\nimport Tick3 from \"../../assets/images/Tick3.gif\";\nimport WidgetsHotelAllotMarkups from \"../widgets/WidgetsHotelAllotMarkups\";\n\nconst HotelAllotMarkups = () => {\n  let {register, handleSubmit, reset, formState: {errors}} = useForm();\n  const [markupPlans, setMarkupPlans] = useState([]);\n  const [agents, setAgents] = useState([]);\n  const [selectedOptionEmail, setSelectedOptionEmail] = useState([]);\n\n  const [show, setShow] = useState(false);\n  const [reloadComponent, setReloadComponent] = useState(false);\n  const [reloadKey, setReloadKey] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setShow(true);\n  }\n\n  useEffect(() => {\n    getMarkupData();\n  }, []);\n\n  function getMarkupData() {\n    let token = getCookieValue(tokenName);\n    // console.log(token)\n    axios.get(ipAddress + \"admin/hotel-fetchMarkupAgents\", {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content_Type': 'application-json',\n      }\n    }).then((response) => {\n      console.log(response.data.recordset);\n      setMarkupPlans(response.data.recordset.markUps)\n      // setAgents(response.data.recordset.aspNetUsers)\n      setAgents(response.data.recordset.aspNetUsers.map(agent => ({value: agent.UserName, label: agent.UserName})))\n    }).catch(e => {\n      console.log(e)\n\n    })\n  }\n\n  function onSubmit(Params) {\n    let agentIds = selectedOptionEmail.map(agent => agent.value);\n    Params = {\n      MarkupPlans: Params.MarkupPlans,\n      agents: agentIds\n    };\n    console.log(Params)\n    if (Params.MarkupPlans === '') {\n      errorToast(\"Choose Markup Plan\")\n    } else if (Params.agents.length === 0) {\n      errorToast(\"Choose Agents\");\n    } else {\n\n      let token = getCookieValue(tokenName);\n\n      axios.post(ipAddress + \"admin/hotel-travelAgentsFlightMarkups\", Params, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content_Type': 'application-json',\n        }\n      })\n        .then((response) => {\n          if (response.data.error === false) {\n            console.log(response.data)\n            reset();\n            getMarkupData();\n            setSelectedOptionEmail([]); // Reset multi-select\n            setReloadComponent(prev => !prev); // Toggle state to force re-render\n            successToast(response.data.message);\n          } else {\n            errorToast(response.data.message);\n          }\n        }).catch(e => {\n        console.log(e)\n      })\n    }\n  }\n\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CCardHeader>\n            <div style={{textAlign: \"center\"}}>\n              <h2><b> Allot New Markup </b></h2>\n            </div>\n\n            <br/>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div className=\"row\">\n                <div className=\"col-sm-4\">\n                  <span>Markup Plans</span>\n                  <select {...register('MarkupPlans')} className=\"form-control\">\n                    <option value=\"\">All</option>\n                    {markupPlans.map(plan => (\n                      <option key={plan.id} value={plan.id}>{plan.planName}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                  <span>Travel Agents</span>\n                  {/*<select  {...register('TravelAgents')} className=\"form-control \">*/}\n                  {/*  <option value=\"\">All</option>*/}\n                  {/*  {agents.map(plan => (*/}\n                  {/*    <option key={plan.UserName} value={plan.UserName}>{plan.UserName}</option>*/}\n                  {/*  ))}*/}\n                  {/*</select>*/}\n\n\n                  <Select\n                    key={reloadKey ? 'reload' : 'no_reload'}\n                    value={selectedOptionEmail}\n                    onChange={setSelectedOptionEmail}\n                    options={[{value: 'All', label: 'All'}, ...agents]}\n                    isMulti\n                    menuPortalTarget={document.body}\n                    styles={{\n                      menuPortal: base => ({...base, zIndex: 9999}),\n                      menu: base => ({...base, maxHeight: 200, overflowY: 'auto'}) // Adjust the max height as needed\n                    }}\n                  />\n                </div>\n\n                <div className=\"col-sm-4\">\n                  <span style={{visibility: \"hidden\"}}>Booking Status</span>\n                  <br/>\n                  <Button variant=\"primary\" className=\"w-100\" type=\"submit\">\n                    Add\n                  </Button>\n                </div>\n\n              </div>\n\n            </form>\n\n          </CCardHeader>\n\n          <div style={{textAlign: \"center\", marginTop: \"40px\", marginBottom: \"15px\"}}>\n            <h2><img src={Tick3} alt=\"Delete Icon\"/><b> Already Alloted Markups </b>\n            </h2>\n            <span>(Get Details of those agents who have enrolled in these Plans)</span>\n          </div>\n\n          <WidgetsHotelAllotMarkups key={reloadComponent ? 'reload' : 'no_reload'}/>\n\n        </CCardBody>\n      </CCard>\n\n      {/*<Modal show={show} onHide={handleClose} centered>*/}\n      {/*  <Modal.Header closeButton>*/}\n      {/*    <Modal.Title>Add Payment</Modal.Title>*/}\n      {/*  </Modal.Header>*/}\n      {/*  <Modal.Body>*/}\n\n      {/*    <form onSubmit={handleSubmit(onSubmit)}>*/}\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"mop\">Mode of Payment</label>*/}\n\n      {/*        <select {...register('mop', {required: true})} className=\"form-control\" id=\"mop\">*/}\n      {/*          <option value=\"\"> Choose Mode of Payment</option>*/}\n      {/*          <option value=\"Credit_Card\"> Credit Card</option>*/}\n      {/*          <option value=\"Debit_Card\">Debit Card</option>*/}\n      {/*          <option value=\"Net_Banking\">Net Banking</option>*/}\n      {/*          <option value=\"UPI\">UPI</option>*/}\n      {/*        </select>*/}\n\n      {/*        {errors.mop && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"amount\">Amount</label>*/}\n      {/*        <input {...register('amount', {required: true})} pattern = \"[0-9]{1,9}\" placeholder=\"Enter Amount\" type=\"text\"*/}\n      {/*               id=\"amount\"*/}\n      {/*               className=\"form-control\"/>*/}\n\n      {/*        {errors.amount && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"date\">Date of Payment</label>*/}\n      {/*        <input {...register('date', {required: true})} placeholder=\"Date of Payment\" type=\"date\" id=\"date\"*/}\n\n      {/*               min=\"1980-01-01\"*/}\n      {/*               className=\"form-control\"/>*/}\n\n      {/*        {errors.date && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"type\">Transaction Type</label>*/}\n\n      {/*        <select {...register('type', {required: true})} className=\"form-control\" id=\"type\">*/}\n      {/*          <option value=\"\"> Transaction Type</option>*/}\n      {/*          <option value=\"Deposit\">Deposit</option>*/}\n      {/*          <option value=\"Withdraw\">Withdraw</option>*/}\n      {/*        </select>*/}\n\n\n      {/*        {errors.type && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"Remarks\">Remarks</label>*/}\n      {/*        <textarea {...register('Remarks', {required: true})} placeholder=\"Remarks\" id=\"Remarks\"*/}\n      {/*                  className=\"form-control\">*/}\n      {/*          </textarea>*/}\n\n      {/*        {errors.Remarks && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <hr/>*/}\n\n      {/*      <div className=\"mb d-flex justify-content-between align-items-center\">*/}\n      {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\n      {/*          Close*/}\n      {/*        </Button>*/}\n\n      {/*        <Button variant=\"primary\" type=\"submit\" className=\"ml-auto\">*/}\n      {/*          Add*/}\n      {/*        </Button>*/}\n      {/*      </div>*/}\n\n\n      {/*    </form>*/}\n\n      {/*  </Modal.Body>*/}\n\n      {/*  /!*<Modal.Footer>*!/*/}\n      {/*  /!*  <Button variant=\"secondary\" onClick={handleClose}>*!/*/}\n      {/*  /!*    Close*!/*/}\n      {/*  /!*  </Button>*!/*/}\n      {/*  /!*  <Button variant=\"primary\" onSubmit={handleSubmit(onSubmit)} >*!/*/}\n      {/*  /!*    Save Changes*!/*/}\n      {/*  /!*  </Button>*!/*/}\n      {/*  /!*</Modal.Footer>*!/*/}\n\n      {/*</Modal>*/}\n    </>\n  )\n}\n\nexport default HotelAllotMarkups\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["WidgetsHotelAllotMarkups","register","handleSubmit","reset","formState","errors","useForm","show","setShow","useState","selectedPlanEmails","setSelectedPlanEmails","selectedPlanName","setSelectedPlanName","selectedMarkupType","setSelectedMarkupType","selectedMarkupValue","setSelectedMarkupValue","selectedCancleCharge","setSelectedCancleCharge","selectedReschedulingCharges","setReschedulingCharges","selectedSuppliers","setSelectedSuppliers","loader","setLoader","handleClose","data","setData","useEffect","token","getCookieValue","tokenName","axios","get","ipAddress","headers","concat","then","response","console","log","recordset","catch","e","viewMarkupAllotedToAgents","_jsx","_Fragment","children","className","_jsxs","CRow","length","Object","values","reduce","acc","item","planName","push","map","group","index","CCol","sm","lg","CWidgetStatsA","style","height","color","value","fontSize","title","status","action","Button","onClick","handleShow","type","filter","x","uniqueSuppliers","Set","supplier","join","uniqueEntries","Array","from","Map","agentEmail","markupType","markupValue","variant","Modal","onHide","centered","size","Header","closeButton","Container","Row","Title","Body","Table","responsive","hover","position","top","FirstName","LastName","PhoneNumber","HotelAllotMarkups","markupPlans","setMarkupPlans","agents","setAgents","selectedOptionEmail","setSelectedOptionEmail","reloadComponent","setReloadComponent","reloadKey","setReloadKey","getMarkupData","markUps","aspNetUsers","agent","UserName","label","CCard","CCardBody","CCardHeader","textAlign","onSubmit","Params","agentIds","MarkupPlans","errorToast","post","error","prev","successToast","message","plan","id","Select","onChange","options","isMulti","menuPortalTarget","document","body","styles","menuPortal","base","zIndex","menu","maxHeight","overflowY","visibility","marginTop","marginBottom","src","Tick3","alt","React","_ref","ref","bsPrefix","fluid","as","Component","props","prefix","useBootstrapPrefix","suffix","classNames","displayName","decoratedBsPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix"],"sourceRoot":""}