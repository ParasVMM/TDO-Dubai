{"version":3,"file":"static/js/2094.8cc8c2fd.chunk.js","mappings":"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","sources":["views/dashboard/users/create/CreateNewUser.js","../node_modules/@hookform/error-message/src/ErrorMessage.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {CCard, CCardHeader, CCardBody, CFormCheck} from \"@coreui/react\";\nimport {errorToast, getCookieValue, ipAddress, successToast, tokenName} from \"../../../../utils/Common\";\nimport axios from \"axios\";\nimport {useForm} from \"react-hook-form\";\nimport {ErrorMessage} from \"@hookform/error-message\"\n\nconst CreateNewUser = () => {\n  const [userRoles, setUserRoles] = useState(null);\n  const [managers, setManagers] = useState(null);\n  const [departments, setDepartments] = useState(null);\n  const [branch, setBranch] = useState(null);\n\n  async function ReadUserRoles() {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/user-roles\";\n\n      let res = await axios.get(url, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n\n      if (res.status === 200 && !res.data.error) {\n        // console.log(res.data.recordset)\n        setUserRoles(res.data.recordset)\n      }\n    } catch (e) {\n      errorToast(e.message)\n    }\n  }\n\n  async function ReadManagers() {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/managers\";\n\n      let res = await axios.get(url, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n\n      if (res.status === 200 && !res.data.error) {\n        // console.log(res.data.recordset)\n        setManagers(res.data.recordset)\n      }\n    } catch (e) {\n      errorToast(e.message)\n    }\n  }\n\n  async function ReadDepartments() {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/departments\";\n\n      let res = await axios.get(url, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n\n      if (res.status === 200 && !res.data.error) {\n        // console.log(res.data.recordset)\n        setDepartments(res.data.recordset)\n      }\n    } catch (e) {\n      errorToast(e.message)\n    }\n  }\n\n  async function ReadBranches() {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/branches\";\n\n      let res = await axios.get(url, {\n        headers: {'Authorization': `Bearer ${token}`}\n      })\n\n      if (res.status === 200 && !res.data.error) {\n        // console.log(res.data.recordset)\n        setBranch(res.data.recordset)\n      }\n    } catch (e) {\n      errorToast(e.message)\n    }\n  }\n\n  useEffect(() => {\n    ReadUserRoles().then();\n    ReadManagers().then();\n    ReadDepartments().then();\n    ReadBranches().then();\n  }, []);\n\n  const {\n    register,\n    handleSubmit,\n    formState: {errors},\n    reset,\n    watch\n  } = useForm();\n\n  const password = watch(\"password\");\n\n  async function onSubmit(data) {\n    try {\n      let token = getCookieValue(tokenName);\n      let url = ipAddress + \"admin/users\";\n\n      let res = await axios.post(url, data, {\n        headers: {'Authorization': `Bearer ${token}`}\n      });\n\n      if (res.status === 200 && res.data.error) {\n        errorToast(res.data.message)\n      } else if (res.status === 200 && !res.data.error) {\n        reset();\n        successToast(res.data.message)\n      }\n    } catch (e) {\n      errorToast(e.message)\n    }\n  }\n\n  return (\n    <>\n      <CCard>\n        <CCardHeader className=\"card-header-bg\">\n          <h4 className=\"mb-0 primary-color\">Create a new account</h4>\n        </CCardHeader>\n\n        <CCardBody>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <label className=\"fw-bold\">\n                  Select User Role <span className=\"text-danger\">*</span>\n                </label>\n              </div>\n\n              {userRoles && userRoles.map(x =>\n                <div className=\"col-md-3\" key={x.Id}>\n                  <input type=\"checkbox\" value={x.Id} id={x.Id} name=\"roles\"\n                         {...register(\"roles\", {required: \"Please Select User Role.\"})}/>\n                  <label htmlFor={x.Id} className=\"ms-2\">{x.Name}</label>\n                </div>\n              )}\n\n              <div className=\"col-12\">\n                <ErrorMessage errors={errors} name=\"roles\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              <div className=\"col-12 mt-4 mb-2\">\n                <h5 className=\"text-muted\">Member Information</h5>\n              </div>\n\n              {/* First Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"firstName\">First Name <span className=\"text-danger\">*</span></label>\n                <input type=\"text\" className=\"form-control\" id=\"firstName\" name=\"firstName\"\n                       {...register(\"firstName\", {required: \"This is required.\"})}/>\n                <ErrorMessage errors={errors} name=\"firstName\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Last Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"lastName\">Last Name <span className=\"text-danger\">*</span></label>\n                <input type=\"text\" className=\"form-control\" id=\"lastName\" name=\"lastName\"\n                       {...register(\"lastName\", {required: \"This is required.\"})}/>\n                <ErrorMessage errors={errors} name=\"lastName\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Email */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"email\">Email <span className=\"text-danger\">*</span></label>\n                <input type=\"email\" className=\"form-control\" id=\"email\" name=\"email\"\n                       {...register(\"email\", {required: \"This is required.\"})}/>\n                <ErrorMessage errors={errors} name=\"email\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Phone Number */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"mobile\">Phone Number <span className=\"text-danger\">*</span></label>\n                <input type=\"tel\" className=\"form-control\" id=\"mobile\" name=\"mobile\"\n                       {...register(\"mobile\", {\n                         required: \"This is required.\",\n                         pattern: {\n                           value: /^[0-9]{10}$/,\n                           message: \"Invalid mobile number. Must be 10 digits.\"\n                         },\n                         maxLength: {\n                           value: 10,\n                           message: \"Mobile number cannot exceed 10 digits.\"\n                         }\n                       })}/>\n                <ErrorMessage errors={errors} name=\"mobile\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              <div className=\"col-12 mt-3 mb-2\">\n                <h5 className=\"text-muted\">Login Information</h5>\n              </div>\n\n              {/* User Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"userName\">User Name <span className=\"text-danger\">*</span></label>\n                <input type=\"text\" className=\"form-control\" id=\"userName\" name=\"userName\"\n                       {...register(\"userName\", {required: \"This is required.\"})}/>\n                <ErrorMessage errors={errors} name=\"userName\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Password */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"password\">Password <span className=\"text-danger\">*</span></label>\n                <input type=\"password\" className=\"form-control\" id=\"password\" name=\"password\"\n                       {...register(\"password\", {\n                         required: \"This is required.\",\n                         minLength: {\n                           value: 6,\n                           message: \"Password must be at least 6 characters long.\"\n                         }\n                       })}/>\n                <ErrorMessage errors={errors} name=\"password\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Confirm Password */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"confirmPassword\">Confirm Password <span className=\"text-danger\">*</span></label>\n                <input type=\"password\" className=\"form-control\" id=\"confirmPassword\" name=\"confirmPassword\"\n                       {...register(\"confirmPassword\", {\n                         required: \"This is required.\",\n                         validate: value => value === password || \"Passwords do not match\"\n                       })}/>\n                <ErrorMessage errors={errors} name=\"confirmPassword\"\n                              render={({message}) => <p className=\"text-danger\">{message}</p>}/>\n              </div>\n\n              {/* Manager Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"manager\">Manager Name</label>\n                <select name=\"manager\" id=\"manager\" className=\"form-control\"\n                        {...register(\"manager\")}>\n                  <option value=\"\">Select Manager Name</option>\n                  {managers && managers.map(x =>\n                    <option key={x.Id} value={x.Id}>{x.FirstName} {x.LastName}</option>\n                  )}\n                </select>\n              </div>\n\n              {/* Department Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"department\">Department Name</label>\n                <select name=\"department\" id=\"department\" className=\"form-control\"\n                        {...register(\"department\")}>\n                  <option value=\"\">Select Department Name</option>\n                  {departments && departments.map(x =>\n                    <option key={x.DepartmentID} value={x.DepartmentID}>{x.DepartmentName}</option>\n                  )}\n                </select>\n              </div>\n\n              {/* Branch Name */}\n              <div className=\"col-md-3 mb-3\">\n                <label htmlFor=\"branch\">Branch Name</label>\n                <select name=\"branch\" id=\"branch\" className=\"form-control\"\n                        {...register(\"branch\")}>\n                  <option value=\"\">Select Branch Name</option>\n                  {branch && branch.map(x =>\n                    <option key={x.BranchID} value={x.BranchID}>{x.BranchName}</option>\n                  )}\n                </select>\n              </div>\n\n              <div className=\"col-12\">\n                <button className=\"btn btn-primary px-5\">Submit</button>\n              </div>\n            </div>\n          </form>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\nexport default CreateNewUser;\n","import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"],"names":["CreateNewUser","userRoles","setUserRoles","useState","managers","setManagers","departments","setDepartments","branch","setBranch","useEffect","async","token","getCookieValue","tokenName","url","ipAddress","res","axios","get","headers","concat","status","data","error","recordset","e","errorToast","message","ReadUserRoles","then","ReadManagers","ReadDepartments","ReadBranches","register","handleSubmit","formState","errors","reset","watch","useForm","password","_jsx","_Fragment","children","_jsxs","CCard","CCardHeader","className","CCardBody","onSubmit","post","successToast","map","x","type","value","Id","id","name","required","htmlFor","Name","ErrorMessage","render","_ref","_ref2","_ref3","_ref4","pattern","maxLength","_ref5","_ref6","minLength","_ref7","validate","_ref8","FirstName","LastName","DepartmentID","DepartmentName","BranchID","BranchName","s","t","as","a","m","o","i","l","r","n","Object","keys","length","indexOf","f","c","g","u","types","d","assign","messages"],"sourceRoot":""}