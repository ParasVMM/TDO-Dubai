{"version":3,"file":"static/js/4009.ec5ff2f8.chunk.js","mappings":"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","sources":["views/pages/register/Register.js","../node_modules/@coreui/icons/src/free/cil-lock-locked.ts","../node_modules/@coreui/icons/src/free/cil-user.ts"],"sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {cilLockLocked, cilUser} from '@coreui/icons'\n\nimport axios from 'axios'\nimport {useForm} from \"react-hook-form\";\nimport {ErrorMessage} from '@hookform/error-message';\nimport AdminLoginBackground from \"../../../assets/images/travel.jpg\";\n\nimport TDO_Logo from \"../../../assets/images/full-logo.png\";\nimport {tokenName, ipAddress, successToast, errorToast} from \"../../../utils/Common\";\nimport {useNavigate} from \"react-router-dom\";\n\nimport { ToastContainer, toast } from 'react-toastify';\n\n\n\n\nconst Register = () => {\n  let {register, handleSubmit, formState: {errors}} = useForm()\n\n  let navigate = useNavigate();\n\n  function onSubmit(data) {\n\n    // console.log(data);\n\n    // var formData = new FormData();\n    // formData.append(\"useremail\", data.useremail);\n    // formData.append(\"password\" , data.password );\n    // axios.post(ipAddress + \"userCheckLogin\" , formData )\n    axios.post(ipAddress + \"login\", data)\n      .then((response) => {\n        console.log(response.data);\n\n        if(!response.data.responseCode) {\n          alert (\"Invalid Response\")\n        } else {\n          if (response.data.responseCode === 1) {\n\n            errorToast(\"Login failed\");\n\n          } else {\n            if(!response.data.token) {\n              alert (\"No Token Found\")\n            } else {\n              // toast.success(\"Login Successful\");\n              // toast.success('Login Successful', {\n              //   position: \"top-right\",\n              //   autoClose: 3000,\n              //   hideProgressBar: false,\n              //   closeOnClick: true,\n              //   pauseOnHover: true,\n              //   draggable: true,\n              //   progress: undefined,\n              //   theme: \"light\",\n              // });\n\n              successToast(\"Login Successful\");\n\n              let token = response.data.token;\n              setCookie(tokenName, token, 24);\n              setTimeout(() => navigate(\"/dashboard\"), 3000)\n            }\n          }\n        }\n      })\n  }\n\n  function setCookie(cookieName, cookieValue, expirationHours) {\n    const d = new Date();\n    d.setTime(d.getTime() + expirationHours * 60 * 60 * 1000);\n    const expires = \"expires=\" + d.toUTCString();\n    document.cookie = `${cookieName}=${cookieValue}; ${expires}; path=/; SameSite=Strict`;\n  }\n\n  return (\n    <div style={{\n      backgroundImage: `url(${AdminLoginBackground})`,\n      backgroundRepeat: 'no-repeat',\n      backgroundSize: '100% 100%'\n    }} className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={9} lg={7} xl={6}>\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <h3 style={{textAlign: \"center\",color: \"red\"}}><b>New Mid Office</b></h3>\n                <div className=\"d-flex justify-content-center\">\n                  <img src={TDO_Logo} className=\"rounded-3\"\n                       style={{backgroundColor: 'red', backgroundSize: '100% 100%'}} alt=\"\"/>\n                </div>\n                <br/>\n                <CForm onSubmit={handleSubmit(onSubmit)}>\n                  {/*<h1>Login</h1>*/}\n\n                  <div className=\"d-flex justify-content-center\">\n                    <p className=\"text-medium-emphasis\">Login to your account</p>\n                  </div>\n\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilUser}/>\n                    </CInputGroupText>\n                    <CFormInput {...register('username', {required: 'This is a required field.'})}\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                autoComplete=\"username\"\n                    />\n                  </CInputGroup>\n                  {errors.username && <p className='text-danger'>This is a required field.</p>}\n\n\n                  {/* Email Code */}\n                  {/* <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput {\n                    ...register('email', {required: 'This is a required field.'})}\n                    placeholder=\"Email\"\n                    type=\"email\"\n                    autoComplete=\"email\"\n                    />\n                  </CInputGroup> */}\n\n\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupText>\n                      <CIcon icon={cilLockLocked}/>\n                    </CInputGroupText>\n                    <CFormInput\n                      {...register('password', {required: true})}\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                    />\n                  </CInputGroup>\n                  {errors.password && <p className='text-danger'>This is a required field.</p>}\n\n                  {/* Confirm Passowrd */}\n                  {/* <CInputGroup className=\"mb-4\">\n                    <CInputGroupText>\n                      <CIcon icon={cilLockLocked} />\n                    </CInputGroupText>\n                    <CFormInput\n                    {...register('newPassword', {required: 'This is a required field.'})}\n                      type=\"password\"\n                      placeholder=\"Repeat password\"\n                      autoComplete=\"new-password\"\n                    />\n                  </CInputGroup> */}\n\n                  <div className=\"d-grid\">\n                    <CButton style={{backgroundColor: 'red', color: 'white', border: 'black'}} type='submit'\n                             color=\"success\">Login</CButton>\n                  </div>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n\n      <ToastContainer/>\n    </div>\n  )\n}\n\nexport default Register\n","export var cilLockLocked = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"];\n","export var cilUser = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M411.6,343.656l-72.823-47.334,27.455-50.334A80.23,80.23,0,0,0,376,207.681V128a112,112,0,0,0-224,0v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L116.4,343.656A79.725,79.725,0,0,0,80,410.732V496H448V410.732A79.727,79.727,0,0,0,411.6,343.656ZM416,464H112V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,184,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L296.5,307.007l97.662,63.479h0A47.836,47.836,0,0,1,416,410.732Z' class='ci-primary'/>\"];\n"],"names":["Register","register","handleSubmit","formState","errors","useForm","navigate","useNavigate","_jsxs","style","backgroundImage","concat","AdminLoginBackground","backgroundRepeat","backgroundSize","className","children","_jsx","CContainer","CRow","CCol","md","lg","xl","CCard","CCardBody","textAlign","color","src","TDO_Logo","backgroundColor","alt","CForm","onSubmit","data","axios","post","ipAddress","then","response","console","log","responseCode","errorToast","token","successToast","cookieName","cookieValue","expirationHours","d","Date","setTime","getTime","expires","toUTCString","document","cookie","setCookie","tokenName","setTimeout","alert","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","required","type","placeholder","autoComplete","username","cilLockLocked","password","CButton","border","ToastContainer"],"sourceRoot":""}