{"version":3,"file":"static/js/5210.c67bb2bd.chunk.js","mappings":"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","sources":["views/widgets/WidgetsAllotMarkups.js","views/dashboard/AllotMarkups.js","../node_modules/react-bootstrap/esm/Container.js","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport {getStyle} from '@coreui/utils'\nimport {CChartBar, CChartLine} from '@coreui/react-chartjs'\nimport CIcon from '@coreui/icons-react'\nimport {cilArrowBottom, cilArrowTop, cilFlightTakeoff, cilNotes, cilOptions} from '@coreui/icons'\nimport axios from \"axios\";\nimport {ipAddress, getCookieValue, tokenName} from \"../../utils/Common\";\nimport CountUp from \"react-countup\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Modal from \"react-bootstrap/Modal\";\nimport Table from \"react-bootstrap/Table\";\nimport {useForm} from \"react-hook-form\";\nimport Select from 'react-select';\n\n\nconst WidgetsAllotMarkups = () => {\n  let {register, handleSubmit, reset, formState: {errors}} = useForm();\n  const [show, setShow] = useState(false);\n  const [selectedPlanEmails, setSelectedPlanEmails] = useState([]);\n  const [selectedPlanName, setSelectedPlanName] = useState('');\n  const [selectedMarkupType, setSelectedMarkupType] = useState('');\n  const [selectedMarkupValue, setSelectedMarkupValue] = useState('');\n  const [selectedCancleCharge, setSelectedCancleCharge] = useState('');\n  const [selectedReschedulingCharges, setReschedulingCharges] = useState('');\n  let [loader, setLoader] = useState(true)\n\n  const handleClose = () => setShow(false);\n\n  const handleShow2 = (group) => {\n    console.log(group)\n  }\n\n  const handleShow = (planName, type, value, cancle_charge, rescheduling_charges, planEmails) => {\n    // console.log(planName)\n    let filter = data.filter(x => x.name === planName);\n    console.log(filter)\n\n    setSelectedPlanName(planName);\n    setSelectedPlanEmails(filter);\n    setSelectedMarkupType(type);\n    setSelectedMarkupValue(value);\n    setSelectedCancleCharge(cancle_charge);\n    setReschedulingCharges(rescheduling_charges);\n    setShow(true);\n  };\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    viewMarkupAllotedToAgents();\n  }, []);\n\n  function viewMarkupAllotedToAgents() {\n    let token = getCookieValue(tokenName);\n    // console.log(token)\n    axios.get(ipAddress + \"admin/view_markup_details\", {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content_Type': 'application-json',\n      }\n    }).then((response) => {\n      console.log(response.data);\n      setData(response.data.recordset);\n      setLoader(false);\n    }).catch(e => {\n      console.log(e)\n      setLoader(false);\n    })\n  }\n\n\n  return (\n    <>\n      {\n        loader ?\n          <div>\n            <span className=\"spinner-border text-primary\"></span>\n          </div>\n          :\n          <>\n            <CRow>\n              {data?.length > 0 && Object.values(\n                data.reduce((acc, item) => {\n                  if (!acc[item.name]) {\n                    acc[item.name] = [];\n                  }\n                  acc[item.name].push(item);\n                  return acc;\n                }, {})\n              ).map((group, index) => (\n                <CCol key={index} sm={6} lg={3}>\n                  <CWidgetStatsA\n                    style={{height: '87px'}}\n                    className=\"mb-4\"\n                    color={index % 6 === 0 ? 'primary' : index % 6 === 1 ? 'danger' : index % 6 === 2 ? 'warning' : index % 6 === 3 ? 'success' : index % 6 === 4 ? 'secondary' : 'info'}\n                    value={\n                      <>\n                        <span style={{fontSize: \"smaller\"}}  >{group[0].name}</span>\n                        {/*<CIcon icon={cilNotes} style={{height: '28px'}} customClassName=\"nav-icon\" />*/}\n                        {/*<CountUp start={0} end={100} useIndianSeparators={true} />*/}\n                        {/*{numberOfInsurance}{' '}*/}\n                        {/*<span className=\"fs-6 fw-normal\">*/}\n                        {/*  (-12.4% <CIcon icon={cilArrowBottom} />)*/}\n                        {/*</span>*/}\n                      </>\n                    }\n                    title={`Status: ${group[0].markup_status}`}\n                    action={\n                      <Button className=\"btn btn-sm\"\n                              // onClick={() => handleShow2(group[0])}\n                              onClick={() => handleShow(group[0].name, group[0].type, group[0].markup_value, group[0].cancellation_charges, group[0].rescheduling_charges, group[0].name)}\n                              variant=\"info\">Get Info</Button>\n                      // <CDropdown alignment=\"end\">\n                      //   <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">\n                      //     <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />\n                      //   </CDropdownToggle>\n                      //   <CDropdownMenu>\n                      //     <CDropdownItem>Action</CDropdownItem>\n                      //     <CDropdownItem>Another action</CDropdownItem>\n                      //     <CDropdownItem>Something else here...</CDropdownItem>\n                      //     <CDropdownItem disabled>Disabled action</CDropdownItem>\n                      //   </CDropdownMenu>\n                      // </CDropdown>\n                    }\n\n                  />\n                </CCol>\n\n              ))\n              }\n\n              {/*<CCol sm={6} lg={3}>*/}\n              {/*  <CWidgetStatsA*/}\n              {/*    className=\"mb-4\"*/}\n              {/*    color=\"primary\"*/}\n              {/*    value={*/}\n              {/*      <>*/}\n              {/*        <CIcon icon={cilNotes} style={{ height: '28px' }} customClassName=\"nav-icon\" />*/}\n              {/*        {' '}*/}\n              {/*        <CountUp start={0} end={numberOfInsurance} useIndianSeparators={true} />*/}\n              {/*      </>*/}\n              {/*    }*/}\n              {/*    title=\"Total Insurance\"*/}\n              {/*    action={*/}\n              {/*      <div>*/}\n              {/*        <Button variant=\"danger\">Get Info</Button>*/}\n              {/*        <CDropdown alignment=\"end\">*/}\n              {/*          <CDropdownToggle color=\"transparent\" caret={false} className=\"p-0\">*/}\n              {/*            <CIcon icon={cilOptions} className=\"text-high-emphasis-inverse\" />*/}\n              {/*          </CDropdownToggle>*/}\n              {/*          <CDropdownMenu>*/}\n              {/*            <CDropdownItem>Action</CDropdownItem>*/}\n              {/*            <CDropdownItem>Another action</CDropdownItem>*/}\n              {/*            <CDropdownItem>Something else here...</CDropdownItem>*/}\n              {/*            <CDropdownItem disabled>Disabled action</CDropdownItem>*/}\n              {/*          </CDropdownMenu>*/}\n              {/*        </CDropdown>*/}\n              {/*      </div>*/}\n              {/*    }*/}\n              {/*    chart={*/}\n              {/*      <CChartLine*/}\n              {/*        className=\"mt-3 mx-3\"*/}\n              {/*        style={{ height: '70px' }}*/}\n              {/*        data={{*/}\n              {/*          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],*/}\n              {/*          datasets: [*/}\n              {/*            {*/}\n              {/*              label: 'My First dataset',*/}\n              {/*              backgroundColor: 'transparent',*/}\n              {/*              borderColor: 'rgba(255,255,255,.55)',*/}\n              {/*              pointBackgroundColor: getStyle('--cui-primary'),*/}\n              {/*              data: [65, 59, 84, 84, 51, 55, 40],*/}\n              {/*            },*/}\n              {/*          ],*/}\n              {/*        }}*/}\n              {/*        options={{*/}\n              {/*          plugins: {*/}\n              {/*            legend: {*/}\n              {/*              display: false,*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          maintainAspectRatio: false,*/}\n              {/*          scales: {*/}\n              {/*            x: {*/}\n              {/*              grid: {*/}\n              {/*                display: false,*/}\n              {/*                drawBorder: false,*/}\n              {/*              },*/}\n              {/*              ticks: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*            },*/}\n              {/*            y: {*/}\n              {/*              min: 30,*/}\n              {/*              max: 89,*/}\n              {/*              display: false,*/}\n              {/*              grid: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*              ticks: {*/}\n              {/*                display: false,*/}\n              {/*              },*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          elements: {*/}\n              {/*            line: {*/}\n              {/*              borderWidth: 1,*/}\n              {/*              tension: 0.4,*/}\n              {/*            },*/}\n              {/*            point: {*/}\n              {/*              radius: 4,*/}\n              {/*              hitRadius: 10,*/}\n              {/*              hoverRadius: 4,*/}\n              {/*            },*/}\n              {/*          },*/}\n              {/*          events: ['none'],*/}\n              {/*        }}*/}\n              {/*      />*/}\n              {/*    }*/}\n              {/*  />*/}\n              {/*</CCol>*/}\n            </CRow>\n\n            <Modal show={show} onHide={handleClose} centered size=\"lg\">\n              <Modal.Header closeButton>\n                <Container>\n                  <Row>\n                    <Modal.Title > {selectedPlanName}</Modal.Title>\n                  </Row>\n                  <span>( <b>Type:</b> {selectedMarkupType}</span>{' | '}\n                  <span><b>Value:</b> {selectedMarkupValue}</span>{' | '}\n                  <span><b>Cancle Charge: </b> {selectedCancleCharge}</span>{' | '}\n                  <span><b>Rescheduling Charge:</b> {selectedReschedulingCharges} )</span>\n\n                </Container>\n              </Modal.Header>\n              <Modal.Body>\n\n                <form>\n                  <div className=\"row\">\n                    <br/>\n                    <div style={{height: \"180px\"}} className=\"table-responsive\">\n                      <Table responsive hover>\n                        <thead style={{position: \"sticky\", top: 0}}>\n                        <tr>\n                          <th>ID</th>\n                          <th>Agent</th>\n                          <th>Name</th>\n                          <th>Contact</th>\n                          <th>Supplier</th>\n                        </tr>\n                        </thead>\n\n                        <tbody>\n\n                        {selectedPlanEmails.map((item, index) => (\n                          <tr key={index}>\n                            <td>{index + 1}</td>\n                            <td>{item.agentEmail}</td>\n                            <td>{item.FirstName}{' '}{item.LastName}</td>\n                            <td>{item.PhoneNumber}</td>\n                            <td style={{textAlign: \"center\"}} >{item.supplier}</td>\n                          </tr>\n                        ))}\n\n\n                        </tbody>\n\n\n                      </Table>\n\n                    </div>\n\n                  </div>\n\n                  <hr/>\n\n                  <div className=\"mb d-flex justify-content-between align-items-center\">\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                    </Button>\n                  </div>\n\n\n                </form>\n\n              </Modal.Body>\n\n              {/*<Modal.Footer>*/}\n              {/*  <Button variant=\"secondary\" onClick={handleClose}>*/}\n              {/*    Close*/}\n              {/*  </Button>*/}\n              {/*  <Button variant=\"primary\" onSubmit={handleSubmit(onSubmit)} >*/}\n              {/*    Save Changes*/}\n              {/*  </Button>*/}\n              {/*</Modal.Footer>*/}\n\n            </Modal>\n\n          </>\n      }\n    </>\n  )\n}\n\nexport default WidgetsAllotMarkups\n","import {CCard, CCardBody, CCardHeader, CRow} from \"@coreui/react\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport React, {useEffect} from \"react\";\nimport plus from \"../../assets/images/plus.png\";\nimport {useForm} from \"react-hook-form\";\nimport {errorToast, getCookieValue, ipAddress, successToast, tokenName} from \"../../utils/Common\";\nimport axios from \"axios\";\nimport {useState} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport WidgetsAllotMarkups from '../widgets/WidgetsAllotMarkups';\nimport Tick3 from \"../../assets/images/Tick3.gif\";\nimport Select from 'react-select';\n\nconst AllotMarkups = () => {\n  let {register, handleSubmit, reset, formState: {errors}} = useForm();\n  const [markupPlans, setMarkupPlans] = useState([]);\n  const [agents, setAgents] = useState([]);\n  const [selectedOptionEmail, setSelectedOptionEmail] = useState([]);\n\n  const [show, setShow] = useState(false);\n  const [reloadComponent, setReloadComponent] = useState(false);\n  const [reloadKey, setReloadKey] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => { setShow(true); }\n\n  useEffect(() => {\n    getMarkupData();\n  }, []);\n  function getMarkupData() {\n    let token = getCookieValue(tokenName);\n    // console.log(token)\n    axios.get(ipAddress + \"admin/fetchMarkupAgents\", {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content_Type': 'application-json',\n      }\n    }).then((response) => {\n      console.log(response.data.recordset);\n      setMarkupPlans(response.data.recordset.markUps)\n      // setAgents(response.data.recordset.aspNetUsers)\n      setAgents(response.data.recordset.aspNetUsers.map(agent => ({ value: agent.UserName, label: agent.UserName })))\n    }).catch(e => {\n      console.log(e)\n\n    })\n  }\n\n  function onSubmit(Params) {\n    let agentIds = selectedOptionEmail.map(agent => agent.value);\n    Params = {\n      MarkupPlans: Params.MarkupPlans,\n      agents: agentIds\n    };\n    console.log(Params)\n    if(Params.MarkupPlans === '')\n    {\n      errorToast(\"Choose Markup Plan\")\n    }else if(Params.agents.length === 0)\n    {\n      errorToast(\"Choose Agents\");\n    }else {\n\n      let token = getCookieValue(tokenName);\n\n      axios.post(ipAddress + \"admin/travelAgentsFlightMarkups\", Params, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content_Type': 'application-json',\n        }\n      })\n        .then((response) => {\n          if (response.data.error === false) {\n            console.log(response.data)\n            reset();\n            getMarkupData();\n            setSelectedOptionEmail([]); // Reset multi-select\n            setReloadComponent(prev => !prev); // Toggle state to force re-render\n            successToast(response.data.message);\n          } else {\n            errorToast(response.data.message);\n          }\n        }).catch(e => {\n        console.log(e)\n      })\n    }\n  }\n\n\n  return(\n    <>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CCardHeader>\n            <div style={{textAlign: \"center\"}}>\n              <h2><b> Allot New Markup </b></h2>\n            </div>\n            {/*<div style={{display: 'flex', justifyContent: 'space-between'}}>*/}\n            {/*  <div style={{flex: 1}}>*/}\n            {/*    <strong> </strong>*/}\n            {/*    <br/>*/}\n            {/*  </div>*/}\n            {/*</div>*/}\n\n            <br/>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n\n              <div className=\"row\">\n\n                <div className=\"col-sm-4\">\n                  <span>Markup Plans</span>\n                  <select {...register('MarkupPlans')} className=\"form-control\">\n                    <option value=\"\">All</option>\n                    {markupPlans.map(plan => (\n                      <option key={plan.id} value={plan.id}>{plan.name}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"col-sm-4\">\n                  <span>Travel Agents</span>\n                  {/*<select  {...register('TravelAgents')} className=\"form-control \">*/}\n                  {/*  <option value=\"\">All</option>*/}\n                  {/*  {agents.map(plan => (*/}\n                  {/*    <option key={plan.UserName} value={plan.UserName}>{plan.UserName}</option>*/}\n                  {/*  ))}*/}\n                  {/*</select>*/}\n\n\n                  <Select\n                    key={reloadKey ? 'reload' : 'no_reload'}\n                    value={selectedOptionEmail}\n                    onChange={setSelectedOptionEmail}\n                    options={[{value: 'All', label: 'All'}, ...agents]}\n                    isMulti\n                    menuPortalTarget={document.body}\n                    styles={{\n                      menuPortal: base => ({...base, zIndex: 9999}),\n                      menu: base => ({...base, maxHeight: 200, overflowY: 'auto',}) // Adjust the max height as needed\n                    }}\n                  />\n\n\n                </div>\n\n                <div className=\"col-sm-4\">\n                  <span style={{visibility: \"hidden\"}}>Booking Status</span>\n                  <br/>\n                  <Button variant=\"primary\" className=\"w-100\" type=\"submit\">\n                    Add\n                  </Button>\n                </div>\n\n              </div>\n\n            </form>\n\n          </CCardHeader>\n\n          <div style={{textAlign: \"center\" , marginTop: \"40px\", marginBottom: \"15px\"}}>\n            <h2><img src={Tick3} alt=\"Delete Icon\"/><b> Already Alloted Markups </b>\n            </h2>\n            <span>(Get Details of those agents who have enrolled in these Plans)</span>\n          </div>\n\n          <WidgetsAllotMarkups key={reloadComponent ? 'reload' : 'no_reload'} />\n\n          {/*<div className=\"row\">*/}\n          {/*  <br/>*/}\n          {/*  <div style={{height: \"335px\"}} className=\"table-responsive\">*/}\n          {/*    <Table responsive hover>*/}\n          {/*      <thead style={{position: \"sticky\", top: 0}}>*/}\n          {/*      <tr>*/}\n          {/*        <th>ID</th>*/}\n          {/*        <th>Plan Name</th>*/}\n          {/*        <th>Datails</th>*/}\n          {/*      </tr>*/}\n          {/*      </thead>*/}\n\n          {/*      <tbody>*/}\n\n          {/*      {data?.length > 0 && Object.values(*/}\n          {/*        data.reduce((acc, item) => {*/}\n          {/*          if (!acc[item.name]) {*/}\n          {/*            acc[item.name] = [];*/}\n          {/*          }*/}\n          {/*          acc[item.name].push(item);*/}\n          {/*          return acc;*/}\n          {/*        }, {})*/}\n          {/*      ).map((group, index) => (*/}\n          {/*        <tr key={index}>*/}\n          {/*          <td>{index + 1}</td>*/}\n          {/*          <td><span className=\"badge bg-info ms-auto\">  {group[0].name} </span> </td>*/}\n          {/*          <td>*/}\n          {/*          <Button className=\"btn btn-sm\" variant=\"primary\" onClick={handleShow} >*/}\n          {/*              Get Details*/}\n          {/*            </Button>*/}\n          {/*          </td>*/}\n          {/*        </tr>*/}\n          {/*      ))*/}\n          {/*      }*/}\n\n\n          {/*      </tbody>*/}\n\n\n          {/*    </Table>*/}\n\n          {/*  </div>*/}\n\n          {/*</div>*/}\n\n        </CCardBody>\n      </CCard>\n\n      {/*<Modal show={show} onHide={handleClose} centered>*/}\n      {/*  <Modal.Header closeButton>*/}\n      {/*    <Modal.Title>Add Payment</Modal.Title>*/}\n      {/*  </Modal.Header>*/}\n      {/*  <Modal.Body>*/}\n\n      {/*    <form onSubmit={handleSubmit(onSubmit)}>*/}\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"mop\">Mode of Payment</label>*/}\n\n      {/*        <select {...register('mop', {required: true})} className=\"form-control\" id=\"mop\">*/}\n      {/*          <option value=\"\"> Choose Mode of Payment</option>*/}\n      {/*          <option value=\"Credit_Card\"> Credit Card</option>*/}\n      {/*          <option value=\"Debit_Card\">Debit Card</option>*/}\n      {/*          <option value=\"Net_Banking\">Net Banking</option>*/}\n      {/*          <option value=\"UPI\">UPI</option>*/}\n      {/*        </select>*/}\n\n      {/*        {errors.mop && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"amount\">Amount</label>*/}\n      {/*        <input {...register('amount', {required: true})} pattern = \"[0-9]{1,9}\" placeholder=\"Enter Amount\" type=\"text\"*/}\n      {/*               id=\"amount\"*/}\n      {/*               className=\"form-control\"/>*/}\n\n      {/*        {errors.amount && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"date\">Date of Payment</label>*/}\n      {/*        <input {...register('date', {required: true})} placeholder=\"Date of Payment\" type=\"date\" id=\"date\"*/}\n\n      {/*               min=\"1980-01-01\"*/}\n      {/*               className=\"form-control\"/>*/}\n\n      {/*        {errors.date && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"type\">Transaction Type</label>*/}\n\n      {/*        <select {...register('type', {required: true})} className=\"form-control\" id=\"type\">*/}\n      {/*          <option value=\"\"> Transaction Type</option>*/}\n      {/*          <option value=\"Deposit\">Deposit</option>*/}\n      {/*          <option value=\"Withdraw\">Withdraw</option>*/}\n      {/*        </select>*/}\n\n\n      {/*        {errors.type && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <div className=\"mb-3\">*/}\n      {/*        <label htmlFor=\"Remarks\">Remarks</label>*/}\n      {/*        <textarea {...register('Remarks', {required: true})} placeholder=\"Remarks\" id=\"Remarks\"*/}\n      {/*                  className=\"form-control\">*/}\n      {/*          </textarea>*/}\n\n      {/*        {errors.Remarks && <p className='text-danger'>This is a required field.</p>}*/}\n      {/*      </div>*/}\n\n      {/*      <hr/>*/}\n\n      {/*      <div className=\"mb d-flex justify-content-between align-items-center\">*/}\n      {/*        <Button variant=\"secondary\" onClick={handleClose}>*/}\n      {/*          Close*/}\n      {/*        </Button>*/}\n\n      {/*        <Button variant=\"primary\" type=\"submit\" className=\"ml-auto\">*/}\n      {/*          Add*/}\n      {/*        </Button>*/}\n      {/*      </div>*/}\n\n\n      {/*    </form>*/}\n\n      {/*  </Modal.Body>*/}\n\n      {/*  /!*<Modal.Footer>*!/*/}\n      {/*  /!*  <Button variant=\"secondary\" onClick={handleClose}>*!/*/}\n      {/*  /!*    Close*!/*/}\n      {/*  /!*  </Button>*!/*/}\n      {/*  /!*  <Button variant=\"primary\" onSubmit={handleSubmit(onSubmit)} >*!/*/}\n      {/*  /!*    Save Changes*!/*/}\n      {/*  /!*  </Button>*!/*/}\n      {/*  /!*</Modal.Footer>*!/*/}\n\n      {/*</Modal>*/}\n    </>\n  )\n}\n\nexport default AllotMarkups\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["WidgetsAllotMarkups","register","handleSubmit","reset","formState","errors","useForm","show","setShow","useState","selectedPlanEmails","setSelectedPlanEmails","selectedPlanName","setSelectedPlanName","selectedMarkupType","setSelectedMarkupType","selectedMarkupValue","setSelectedMarkupValue","selectedCancleCharge","setSelectedCancleCharge","selectedReschedulingCharges","setReschedulingCharges","loader","setLoader","handleClose","data","setData","useEffect","token","getCookieValue","tokenName","axios","get","ipAddress","headers","concat","then","response","console","log","recordset","catch","e","viewMarkupAllotedToAgents","_jsx","_Fragment","children","className","_jsxs","CRow","length","Object","values","reduce","acc","item","name","push","map","group","index","CCol","sm","lg","CWidgetStatsA","style","height","color","value","fontSize","title","markup_status","action","Button","onClick","handleShow","planName","type","cancle_charge","rescheduling_charges","planEmails","filter","x","markup_value","cancellation_charges","variant","Modal","onHide","centered","size","Header","closeButton","Container","Row","Title","Body","Table","responsive","hover","position","top","agentEmail","FirstName","LastName","PhoneNumber","textAlign","supplier","AllotMarkups","markupPlans","setMarkupPlans","agents","setAgents","selectedOptionEmail","setSelectedOptionEmail","reloadComponent","setReloadComponent","reloadKey","setReloadKey","getMarkupData","markUps","aspNetUsers","agent","UserName","label","CCard","CCardBody","CCardHeader","onSubmit","Params","agentIds","MarkupPlans","errorToast","post","error","prev","successToast","message","plan","id","Select","onChange","options","isMulti","menuPortalTarget","document","body","styles","menuPortal","base","zIndex","menu","maxHeight","overflowY","visibility","marginTop","marginBottom","src","Tick3","alt","React","_ref","ref","bsPrefix","fluid","as","Component","props","prefix","useBootstrapPrefix","suffix","classNames","displayName","decoratedBsPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix"],"sourceRoot":""}