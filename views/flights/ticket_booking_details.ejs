<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>TDO DXB | Flights </title>
    <%- include('../partials/header2') %>

    <style>
        /* Adjust the sector to use flex column layout so content aligns correctly */
        /* Styling the new sector container with distinct class names */
        .custom-sector {
            margin: 15px;
            background: white;
            border-radius: 12px;
            padding: 15px;
            display: flex;
            align-items: flex-start; /* Align items to the top */
            justify-content: space-between; /* Ensures space between icon, text, and button */
            gap: 20px; /* Space between the icon, sector info, and button */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);

            transition: transform 0.3s, box-shadow 0.3s;
        }

        /* Hover effect for new sector */
        .custom-sector:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        /* New sector icon styling */
        .custom-sector-icon {
            font-size: 36px;
            color: #ec3e3e;
            animation: bounce 1.5s infinite;
            flex-shrink: 0; /* Prevents icon from shrinking */
        }

        /* Bounce animation for the sector icon */
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }

        /* New sector info container to align the header and details */
        .custom-sector-info {
            flex-grow: 1; /* Allows this container to grow and take remaining space */
        }

        /* Sector header style */
        .custom-sector-header {
            font-size: 20px;
            color: #333;
            margin: 0 0 5px 0; /* Adds space below the header */
            font-weight: bold;
        }

        /* Sector details text styling */
        .custom-sector-details {
            font-size: 14px;
            color: #555;
            line-height: 1.6;
            margin: 0;
        }

        /* Styling for the new Cancel button */
        .custom-cancel-btn {
            background: #ec3e3e;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.3s;
            white-space: nowrap; /* Prevents text from wrapping */
        }

        /* Hover effect for new Cancel button */
        .custom-cancel-btn:hover {
            background-color: #ec3e3e;
            transform: scale(1.1);
        }

        /* Optional media query for smaller screens */
        @media (max-width: 768px) {
            .custom-sector {
                flex-direction: column; /* Stack sector content on smaller screens */
                align-items: flex-start;
            }

            .custom-sector-info {
                margin-top: 10px;
            }

            .custom-cancel-btn {
                align-self: flex-end; /* Align the button to the right on small screens */
                margin-top: 10px;
            }
        }

        .sector {
            margin: 15px;
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column; /* Changed to column layout */
            gap: 15px;
            transition: transform 0.3s, box-shadow 0.3s;
        }

        /* On hover, add shadow and slight move */
        .sector:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        /* Ensure the sector icon and details are aligned in the same row */
        .sector-info {
            display: flex; /* Aligns the icon and details horizontally */
            align-items: center; /* Vertically centers the items */
            gap: 10px; /* Adds space between the icon and the details */
        }

        /* Keep the sector header readable */
        .sector-header {
            font-size: 18px;
            color: #333;
            margin: 0;
        }

        /* Ensure sector details appear beside the icon */
        .sector-details {
            font-size: 14px;
            color: #555;
            line-height: 1.6;
        }

        /* Sector icon styling */
        .sector-icon {
            font-size: 32px;
            color: #ec3e3e;
            animation: bounce 1.5s infinite;
        }

        /* Bounce animation for the sector icon */
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }


        /* Bounce animation for the sector icon */
        @keyframes bounce {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }


        /* Fix for person list to be aligned correctly */
        .person-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: flex-start; /* Align the person cards properly */
            margin-top: 10px;
            flex-grow: 1; /* Make sure the list grows to fill space */
        }

        /* Person card layout */
        .person-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: #ffebeb;
            border-radius: 8px;
            padding: 10px;
            width: 200px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }

        /* Hover effect for person card */
        .person-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        /* Person icon styling */
        .person-icon {
            font-size: 28px;
            color: #ec3e3e;
            margin-bottom: 5px;
        }

        /* Person name and age styling */
        .person-name {
            font-size: 14px;
            font-weight: 500;
            color: #333;
            margin-bottom: 5px;
        }

        .person-age {
            font-size: 12px;
            color: #555;
            margin-bottom: 5px;
        }

        /* Checkbox styling */
        .person-checkbox {
            transform: scale(1.2);
            cursor: pointer;
        }

        /* Footer styling for modal */
        .modal-footer {
            display: flex;
            justify-content: flex-end;
            margin-top: 20px;
        }

        /* Cancel button styling */
        .cancel-all-btn {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.81));
            color: white;
            border: none;
            padding: 12px 18px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s, transform 0.3s;
        }

        .cancel-all-btn:hover {
            transform: translateY(-2px);
        }

        /* Button hover effect */
        .proceed-btn {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.81));
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s, background-color 0.3s;
        }

        .proceed-btn:hover {
            transform: translateY(-2px);
        }

        .paginate_button.previous {
            /*font-size: 12px !important;*/
            width: 85px !important;
        }

        .rounded-modal {
            border-radius: 15px; /* Adjust value as needed */
            overflow: hidden; /* Prevents content from spilling over rounded corners */
        }

        /*.invoice-container {*/
        /*    width: 100%;*/
        /*}*/
        /*h1 {*/
        /*    color: #e74c3c;*/
        /*    text-align: center;*/
        /*    margin-bottom: 20px;*/
        /*}*/
        /*.invoice-header, .invoice-footer {*/
        /*    display: flex;*/
        /*    justify-content: space-between;*/
        /*}*/
        /*.invoice-header div, .invoice-footer div {*/
        /*    width: 45%;*/
        /*}*/
        /*table {*/
        /*    width: 100%;*/
        /*    border-collapse: collapse;*/
        /*    margin-bottom: 20px;*/
        /*}*/
        /*table, th, td {*/
        /*    border: 1px solid #ddd;*/
        /*}*/
        /*th, td {*/
        /*    padding: 10px;*/
        /*    text-align: left;*/
        /*}*/
        /*th {*/
        /*    background-color: #f8f8f8;*/
        /*    color: #333;*/
        /*}*/
        /*.total {*/
        /*    font-size: 1.5em;*/
        /*    color: #e74c3c;*/
        /*    text-align: right;*/
        /*}*/
        .badge {
            padding: 3px 6px;
            border-radius: 3px;
            margin-left: 5px; /* Adjust as needed */
        }


        .icon1 {
            font-size: 20px;
            color: red;
        }

        .status {
            font-weight: bold;
            color: #007bff; /* blue color */
        }

        .type {
            color: #28a745; /* green color */
        }

        .transaction-details p {
            margin-bottom: 0; /* Ensure paragraphs are inline */
        }

        .table-container {
            overflow-x: auto;
            max-width: 100%;
        }

        .table {
            width: 100%;
            table-layout: auto; /* Changed from fixed to auto for more flexibility */
            border-collapse: collapse;
            white-space: nowrap; /* Prevent wrapping in table cells by default */
        }

        .table th, .table td {
            padding: 5px 5px;
            text-align: left;
            vertical-align: middle;
            font-size: 12px;
            border: 2px solid #ddd;
            word-wrap: break-word;
            overflow-wrap: break-word;
            word-break: break-all; /* Breaks long words without spaces */
        }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        /* Set specific widths for columns with typically longer text */
        .table td:nth-child(1), /* TDO Reference Id */
        .table td:nth-child(2), /* Total Amount Paid */
        .table td:nth-child(3), /* Ticket Status */
        .table td:nth-child(4), /* Markup By Agent */
        .table td:nth-child(5), /* Departure Airport */
        .table td:nth-child(6), /* Departure Airport */
        .table td:nth-child(7), /* Departure Airport */
        .table td:nth-child(8) /* Arrival Airport */
        {
            min-width: 100px;
            max-width: 100px;
            white-space: normal; /* Allow wrapping for longer text */
        }

        .table td img {
            max-width: 30px;
            height: auto;
            vertical-align: middle;
            margin-right: 8px;
        }

        .nowrap {
            white-space: nowrap; /* Prevent wrapping for specific short text */
        }

        @media (max-width: 768px) {
            .table th, .table td {
                font-size: 6px;
                padding: 6px;
            }

            .table td:nth-child(1), .table td:nth-child(3),
            .table td:nth-child(6), .table td:nth-child(7) {
                min-width: 80px;
                max-width: 120px;
            }
        }

        /* Styling the table title */
        h5 {
            background-color: #ec3e3e;
            border-radius: 12px;
            padding: 5px;
            font-family: Arial, sans-serif;
            color: white;
            text-align: left;
            margin-bottom: 15px;
        }

        .print-button {

            margin: 8px;
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82)); /* Green gradient */
            color: #fff;
            padding: 5px 5px;
            font-size: 12px;
            font-weight: bold;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow */
            transition: all 0.3s ease;
        }

        .print-button:hover {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82)); /* Lighter green on hover */
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px); /* Subtle lift effect */
        }

        .print-button:active {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82));
            transform: translateY(0); /* Reset lift effect on click */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .radio-group {
            display: flex;
            gap: 20px; /* Space between options */
            flex-wrap: wrap;
        }

        .radio-option {
            display: flex;
            align-items: center;
            background-color: #f2f2f2;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            transition: background-color 0.3s ease;
        }

        .radio-option input[type="radio"] {
            display: none; /* Hide default radio button */
        }

        .radio-option i {
            font-size: 20px;
            color: #4CAF50;
            margin-right: 8px;
        }

        .radio-option .price {
            margin-left: auto;
            color: #4CAF50;
            font-weight: bold;
        }

        .radio-option:hover {
            background-color: #e0e0e0;
        }

        .radio-option input[type="radio"]:checked + i {
            color: #388E3C; /* Change icon color when selected */
        }

        .radio-option input[type="radio"]:checked + span {
            color: #388E3C; /* Change text color when selected */
        }

        canvas {
            overflow-y: hidden;
            overflow-x: hidden;
            width: 100%;
            margin: 0;
        }

        /* Make the modal backdrop fully transparent */
        #popper .modal-backdrop {
            background-color: transparent !important;
        }

        /* Make the modal content transparent */
        #popper .modal-content {
            background-color: transparent !important;
            border: none; /* Optional: remove the border if you want a clean transparent look */
        }

        /* Optional: Adjust the modal dialog to make it fully transparent */
        #popper .modal-dialog {
            background-color: transparent !important;
            border: none; /* Optional: remove the border */
        }

        /* Optional: Add custom styles for modal content if needed */
        #popper .modal-body {
            background-color: transparent !important;
        }

        /* Form container styling */
        .form-container {
            width: 100%; /* Adjust width as needed */
            max-width: 600px; /* Set a maximum width for the form */
            margin: 20px auto; /* Center the form horizontally */
            padding: 20px;
            background-color: #f9f9f9; /* Light gray background */
            border: 1px solid #ddd; /* Soft border */
            border-radius: 10px; /* Rounded corners */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow */
            font-family: Arial, sans-serif;
        }

        /* Label styling */
        .form-label {
            display: block;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
        }

        /* Textarea styling */
        .form-textarea {
            width: 100%; /* Full width of the form */
            padding: 12px;
            font-size: 14px;
            color: #555;
            border: 1px solid #ccc; /* Soft gray border */
            border-radius: 8px; /* Rounded corners */
            resize: vertical; /* Allow vertical resizing only */
            background-color: #fff; /* White background */
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05); /* Inset shadow for depth */
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        /* Focus effect on textarea */
        .form-textarea:focus {
            outline: none;
            border-color: #007bff; /* Blue border on focus */
            box-shadow: 0 0 6px rgba(0, 123, 255, 0.3); /* Glow effect */
        }

        /* Placeholder styling */
        .form-textarea::placeholder {
            color: #aaa;
            font-style: italic;
        }

        /* Responsive design for mobile */
        @media (max-width: 768px) {
            .form-container {
                padding: 15px;
            }

            .form-textarea {
                font-size: 12px;
            }
        }

    </style>
</head>
<body onload="showBookingDetails(`<%= id %>`);">
<div id="preloader">
    <div class="loader">
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--dot"></div>
        <div class="loader--text"></div>
    </div>
</div>
<div id="main-wrapper">
    <%- include('../partials/navbar2') %>
    <%- include('../partials/sidebar2') %>
    <div class=" content-body default-height">
        <!-- row -->
        <div class="container-fluid">
            <!--            <div class="row page-titles">-->
            <!--                <ol class="breadcrumb">-->
            <!--                    <li class="breadcrumb-item active"><a href="javascript:void(0)">Logs</a></li>-->
            <!--                </ol>-->
            <!--            </div>-->
            <div class="col-12">
                <div class="card">
                    <!--                    <div class="card-header">-->
                    <!--                        <h3 class="card-title">Logs</h3>-->
                    <!--                    </div>-->

                    <div class="container">
                        <button class="print-button" data-bs-toggle="modal" data-bs-target="#modal"><i
                                    class="fas fa-print"></i> Print Ticket
                        </button>
                        <a id="test" href="" target="_blank">
<!--                            <button class="print-button"><img width="12px" src="/assets/visa.png"> Download Invoice-->
<!--                            </button>-->
                        </a>
                        <button class="print-button" data-bs-toggle="modal" data-bs-target="#modals"
                                onclick="renderSectors()"><i class="fas fa-times"></i> Sector Cancellation
                        </button>
                        <button class="print-button" data-bs-toggle="modal" data-bs-target="#modalp"
                                onclick="renderPartialSectors()"><i class="fas fa-times"></i> Partial Cancellation
                        </button>
                        <button class="print-button" data-bs-toggle="modal" data-bs-target="#modalr"
                                onclick="renderFull()"><i class="fas fa-times"></i> Full Cancellation
                        </button>
                        <button class="print-button" data-bs-toggle="modal" data-bs-target="#modalagentMarkup"
                                onclick="agentLastMinMarkup()"><i class="fab fa-markdown"></i> Last Min Markup
                        </button>
                        <div id="result">
                            <i class="spinner-grow"></i>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>
    <%- include('../partials/footer2') %>
</div>
<div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content ">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Select Types Of Ticket</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body table-container" id="myans">
                <canvas id="canvas"></canvas>

                <!--                <div class="row text-center">-->
                <!--                     <div class="col-6">-->
                <!--                         <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal">  <i class="fas fa-user-tie"></i>  With Agent Without Price</button>-->
                <!--                     </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;"  data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-tie"></i> With Agent With Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent Without Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent With Price</button>-->
                <!--                    </div>-->
                <!--                </div>-->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="popper" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen bg-white rounded-modal">
        <div class="modal-content ">

            <div class="modal-body table-container" id="myans">
                <canvas id="canvas"></canvas>

                <!--                <div class="row text-center">-->
                <!--                     <div class="col-6">-->
                <!--                         <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal">  <i class="fas fa-user-tie"></i>  With Agent Without Price</button>-->
                <!--                     </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;"  data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-tie"></i> With Agent With Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent Without Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent With Price</button>-->
                <!--                    </div>-->
                <!--                </div>-->
            </div>

        </div>
    </div>
</div>


<div class="modal fade" id="modalp" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Partial Cancellation</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Sector 1 -->
            <div id="myPersons">

            </div>
            <div class="modal-footer" id="btt">
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modals" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Sector Cancellation</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div id="mySectors">
                <!-- Sector 1 -->
                <div class="custom-sector">
                    <i class="fas fa-plane-departure custom-sector-icon"></i>
                    <div class="custom-sector-info">
                        <h3 class="custom-sector-header">Delhi (DEL) → Mumbai (BOM)</h3>
                        <p class="custom-sector-details">
                            Flight: AI-101<br>
                            Departure: 15 Nov 2024, 10:00 AM<br>
                            Arrival: 15 Nov 2024, 12:00 PM
                        </p>
                    </div>
                    <button class="custom-cancel-btn">Cancel</button>
                </div>
                <!-- Sector 2 -->
                <div class="custom-sector">
                    <i class="fas fa-plane custom-sector-icon"></i>
                    <div class="custom-sector-info">
                        <h3 class="custom-sector-header">Mumbai (BOM) → Bangalore (BLR)</h3>
                        <p class="custom-sector-details">
                            Flight: AI-102<br>
                            Departure: 15 Nov 2024, 2:00 PM<br>
                            Arrival: 15 Nov 2024, 4:00 PM
                        </p>
                    </div>
                    <button class="custom-cancel-btn">Cancel</button>
                </div>

            </div>
        </div>

    </div>
</div>


<div class="modal fade" id="modalr" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content ">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Select Types Of Ticket</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body table-container" id="myfull">


                <!--                <div class="row text-center">-->
                <!--                     <div class="col-6">-->
                <!--                         <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal">  <i class="fas fa-user-tie"></i>  With Agent Without Price</button>-->
                <!--                     </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;"  data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-tie"></i> With Agent With Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent Without Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent With Price</button>-->
                <!--                    </div>-->
                <!--                </div>-->
            </div>
            <div class="modal-footer" id="bttfull">
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modalagentMarkup" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content ">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Add/Update Markup</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body table-container">
                <form action="" id="ag_mark_Form">
                    <div class="row">
                        <input type="hidden" id="booking_id">
                        <div class="col-12">
                            <label for="ag_last_markup_value">Enter Markup Value</label>
                            <input type="text" name="ag_last_markup_value" required id="ag_last_markup_value"
                                   class="form-control">
                        </div>
                    </div>
                    <button id="ag_mark_button" type="button" class="btn btn-primary mb-0 mt-3"
                            onclick="last_minMarkup()">
                        Submit
                    </button>
                </form>
            </div>
            <div class="modal-footer" id="bttfull">


            </div>
        </div>
    </div>
</div>

<script>
    let row = [];
    let partialArray = [];
    let Airports = [];
    let Airlines = [];
    $("#ag_last_markup_value").on("input", function () {
        // Allow only numbers and a single decimal point
        this.value = this.value.replace(/[^0-9.]/g, ""); // Remove non-numeric characters except "."
        if ((this.value.match(/\./g) || []).length > 1) {
            this.value = this.value.substring(0, this.value.length - 1); // Remove additional decimals
        }
    });

    function formatDuration(duration) {
        let [hours, minutes] = duration.split(":").map(Number);
        let formattedDuration = `${hours > 0 ? hours + " hrs " : ""}${minutes > 0 ? minutes + " mins" : ""}`.trim();
        return formattedDuration || "0 mins";
    }
    async function getAirlineNames() {
        try {
            let url = '/flights/airlines';
            let response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            response = await response.json();
            console.log(response.data)
            Airlines = response.data
        } catch (error) {
            console.error("Error fetching airport names:", error);
            return []; // Return an empty array in case of an error
        }
    }

    async function showBookingDetails(id) {

        getAirports().then(async ()=>{

            await getAirlineNames()
        let formData = new FormData();

        formData.append("bookingId", id);

        let res = await fetch('/flights/getTicketDetails', {
            method: "POST",
            body: formData
        });

        res = await res.json();


        row = res.response[0];



        let bookingDetail = row;
        console.log("wdxs",bookingDetail)

        let sector = bookingDetail.SectorJson

        let pass = bookingDetail.PassengerJson

        let segment = bookingDetail.SegmentJson

       // document.getElementById("test").href = `https://tdo.webyatra.in/CtrlReporting/InvoiceReports?PNRNO=${bookingDetail.wy_invoice_number}&CN=N&BillTyp=AIR&Brnid=&ReportType=CNK&Typeofreport=undefined&DatewiseStartdate=&DatewiseEnddate=&Difformat=undefined&Pstartdate=&Pendate=&Partycode=&StartInvno=undefined&EndInvno=undefined&Refund=false&Userid=SUP&EmailOpt=false&EmailId=&Maindb=dFviql6SMgxLGyjtG+maP1f3VyY3Q+yPmHJV/COkf08=&Currdb=dFviql6SMgxLGyjtG+maP1f3VyY3Q+yPmHJV/COkf08=&User=5b17FYTyIWKgWzEFeIG9mg==&PWD=zd4y5Vh4jQttRBFvF3ddx3UORdIfAiNLoPH8OphzTEo=&IP=cT+Cv6OTTj+7n77wBCqGSWhj5GLKM9yVfOrIIc/Rz6vSdjyLNYeLR5idxHg92T8L&InvFormat=InvPDF&OrderBy=Billno&ClubMischg=CLN&Name=&Address=&State=&City=&Walkin=false&PdfAttach=false&MergePDF=false&RmPrint=true&PrintDisc=true&Barcode=true&RptLang=en`

        let ans = ``;

        ans += `
<h5>Booking Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">TDO Reference Id</th>
                <th class="text-center">Booked On</th>
                <th class="text-center">Total Amount Paid</th>
                <th class="text-center">Platform Fees</th>
                <th class="text-center">Platform Tax</th>
                <th class="text-center">Ticket Status</th>
                <th class="text-center">Markup By Agent</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center">${row.booking_id}</td>
<td class="text-center">
  ${new Date(row.booking_date_time).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })} <br>
  ${new Date(row.booking_date_time).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false })} Hrs
</td>
                <td class="text-center">${row.agent_amount}</td>
                <td class="text-center">${row.platform_fee}</td>
                <td class="text-center">${row.platform_tax}</td>
                <td class="text-center">${row.ticket_status}</td>
                <td class="text-center">${row.agent_markup}</td>
            </tr>
        </tbody>
    </table>
</div>
<h5>Flight Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">Flight</th>
                <th class="text-center">Fare Type</th>
                <th class="text-center">Trip Type</th>
                <th class="text-center">Departure</th>
                <th class="text-center">Arrival</th>
                <th class="text-center">Departure Airport</th>
                <th class="text-center">Arrival Airport</th>
                <th class="text-center">Duration</th>
            </tr>
        </thead>
        <tbody>`

        for (let trip = 0; trip < sector.length; trip++) {
            let flight = sector[trip];
            console.log(Airports)
            let airline = Airlines.find(a => a.Code === flight.airline_code);
            let Dairline = Airports.find(a => a.AirportCode === flight.departure_airport_name);
            let Aairline = Airports.find(a => a.AirportCode === flight.arrival_airport_name);
            let airlineName = airline ? airline.Name : flight.airline_code;
            let DepartureCityName = Dairline ? Dairline.CityName : flight.airline_code;
            let ArrivalCityName = Aairline ? Aairline.CityName : flight.airline_code;
            let DepartureAirportName = Dairline ? Dairline.AirportName : flight.departure_airport_name;
            let ArrivalAirportName = Aairline ? Aairline.AirportName : flight.arrival_airport_name;


            ans += `
            <tr>
<td class="nowrap text-center">
        <img src="https://content.airhex.com/content/logos/airlines_${flight.airline_code}_30_30_s.png"/>

<br>${airlineName}(${flight.airline_code}-${flight.flight_number})</td>

</td>
 <td class="col-lg-1 col-sm-1 nowrap" style="word-wrap: break-word;" id="fareType">${flight.fare_type}</td>
        <td  id="fare" class="nowrap">${bookingDetail.trip_type}</td>
        <td id="departure" class="nowrap text-center">
${new Date(flight.departure).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })} <br>
  ${new Date(flight.departure).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false })} Hrs
</td>

        <td  id="arrival" class="nowrap text-center">
${new Date(flight.arrival).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })} <br>
  ${new Date(flight.arrival).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false })} Hrs       </td>
        <td class="nowrap text-center">
${DepartureAirportName} <br>(${DepartureCityName})
</td>
 <td class="nowrap text-center">
${ArrivalAirportName} <br>(${ArrivalCityName})
</td>
        <td  id="duration" class="nowrap text-center">${formatDuration(flight.duration)}</td>
</tr>
            `
        }
        ans += `</tbody>
    </table>
</div>

<h5>Segment Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">Flight</th>
                <th class="text-center">Origin</th>
                <th class="text-center">Destination</th>
                <th class="text-center">Departure</th>
                <th class="text-center">Arrival</th>
                <th class="text-center">Departure Airport</th>
                <th class="text-center">Arrival Airport</th>
                <th class="text-center">Duration</th>
            </tr>
        </thead>
        <tbody>

`
        for (let seg = 0; seg < segment.length; seg++) {
            let singleSegment = segment[seg];
            let airline = Airlines.find(a => a.Code === singleSegment.airline_code);
            let airlineName = airline ? airline.Name : flight.airline_code;
            let Dairline = Airports.find(a => a.AirportCode === singleSegment.departure_airport_name);
            let Aairline = Airports.find(a => a.AirportCode === singleSegment.arrival_airport_name);
            let DepartureCityName = Dairline ? Dairline.CityName : singleSegment.airline_code;
            let DepartureCityCode = Dairline ? Dairline.CityCode : singleSegment.airline_code;
            let ArrivalCityName = Aairline ? Aairline.CityName : singleSegment.airline_code;
            let ArrivalCityCode = Aairline ? Aairline.CityCode : singleSegment.airline_code;
            let DepartureAirportName = Dairline ? Dairline.AirportName : singleSegment.departure_airport_name;
            let ArrivalAirportName = Aairline ? Aairline.AirportName : singleSegment.arrival_airport_name;
            ans += `
           <tr style="text-align: center">
<td class="nowrap text-center">
        <img src="https://content.airhex.com/content/logos/airlines_${singleSegment.airline_code}_30_30_s.png"/>

<br>${airlineName}(${singleSegment.airline_code}-${singleSegment.flight_number})</td>

</td>
<td class="nowrap text-center">${DepartureCityName}(${DepartureCityCode})</td>
<td class="nowrap text-center">${ArrivalCityName}(${ArrivalCityCode})</td>
<td class="nowrap text-center">
${new Date(singleSegment.departure).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })} <br>
  ${new Date(singleSegment.departure).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false })} Hrs
</td>
<td class="nowrap text-center">
${new Date(singleSegment.arrival).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })} <br>
  ${new Date(singleSegment.arrival).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false })} Hrs</td>
<td class="nowrap text-center">${DepartureAirportName} <br>(${DepartureCityName})</td>
<td class="nowrap text-center">${ArrivalAirportName} <br>(${ArrivalCityName})</td>
<td class="nowrap text-center">${formatDuration(singleSegment.duration)}</td>
</tr>
            `
        }

        ans += `</tbody>
    </table>
</div>

<h5>Passenger Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">Name & FF</th>
                <th class="text-center">Pax Type</th>
                <th class="text-center">Ticket Status</th>
<th class="text-center">Extra Meal</th>
<th class="text-center">Extra Baggage</th>
            </tr>
        </thead>
        <tbody>
        `

// Group passengers by unique identifier (e.g., ticket_no)
        let passengerMap = new Map();

        pass.forEach(passenger => {
            let key = `${passenger.first_name}${passenger.last_name}`; // Unique key for each passenger
            if (!passengerMap.has(key)) {
                passengerMap.set(key, {
                    salutation: passenger.salutation,
                    first_name: passenger.first_name,
                    last_name: passenger.last_name,
                    pax_type: passenger.pax_type,
                    ticket_no: passenger.ticket_no,
                    meals: [],
                    baggages: []
                });
            }
            // Aggregate meal and baggage data
            if (passenger?.ssr_data?.length > 0) {
                let meals = passenger.ssr_data.filter(item => item.ssr_type === 'meal');
                let baggages = passenger.ssr_data.filter(item => item.ssr_type === 'Baggage');
                meals.forEach(meal => passengerMap.get(key).meals.push(meal));
                baggages.forEach(baggage => passengerMap.get(key).baggages.push(baggage));
            }
        });

// Generate table rows for consolidated passenger data
        let paxIndex = 1;

        passengerMap.forEach((data, key) => {
            ans += `
    <tr style="text-align: center">
        <td class="text-center">${paxIndex++} - ${data.salutation} ${data.first_name} ${data.last_name}</td>
        <td class="text-center">${data.pax_type}</td>
        <td class="text-center">${data.ticket_no}</td>
        <td class="text-center">`;

            if (data.meals.length > 0) {
                data.meals.forEach(m => {
                    ans += `(${m?.origin || 'Nil'}) - (${m?.destination || 'Nil'}) <br>${m?.description || 'Nil'}<br><br>`;
                });
            } else {
                ans += `Nil`;
            }
            ans += `</td><td class="text-center">`;

            if (data.baggages.length > 0) {
                data.baggages.forEach(b => {
                    ans += ` (${b?.origin || 'Nil'}) - (${b?.destination || 'Nil'}) <br>${b?.description || 'Nil'}<br><br>`;
                });
            } else {
                ans += `Nil`;
            }
            ans += `</td></tr>`;
        });
        ans += `</tbody>
    </table>
</div>`;

        let ticket = `

                <table class="table">

                    <thead style="background-color: #ec3e3e !important; color: white">
                    <tr>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> With Agent Detail</th>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-slash"></i> Without Agent Details</th>
                    </tr>
                    </thead>
<tbody>
<tr>
    <td class="text-center"> <a href="/flights/ticket/${row.trace_id}/ai" target="_blank"><button class="print-button">  <i class="fas fa-check"></i>  Including Price</button></a></td>
    <td class="text-center"> <a href="/flights/ticket/${row.trace_id}/wi" target="_blank"><button class="print-button">  <i class="fas fa-check"></i>  Including Price</button></a></td>
</tr>
<tr>
    <td class="text-center"> <a href="/flights/ticket/${row.trace_id}/ae" target="_blank"><button class="print-button">  <i class="fas fa-times"></i>  Excluding Price</button></a></td>
    <td class="text-center"> <a href="/flights/ticket/${row.trace_id}/we" target="_blank"><button class="print-button">  <i class="fas fa-times"></i>  Excluding Price</button></a></td>
</tr>
</tbody>
                </table>
        `
        document.getElementById("result").innerHTML = ans;
        document.getElementById("myans").innerHTML = ticket;
    })
    }

    async function last_minMarkup() {
        try {
            if ($("#ag_mark_Form").valid()) {
                // Get form values
                let booking_id = document.getElementById("booking_id").value;
                let mar_value = document.getElementById("ag_last_markup_value").value;

                // API endpoint
                let url = "/flights/lastMinMarkup";

                // Fetch request to update markup
                let response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        markup_value: mar_value,
                        booking_id: booking_id,
                    }),
                });

                let result = await response.json();

                // Handle response
                if (result.error || result.warning) {
                    let icon = result.error ? "error" : "warning";
                    Swal.fire({
                        title: "OOPS!",
                        text: result.message,
                        icon: icon,
                    });
                } else {
                    // Refresh form values and hide modal
                    showBookingDetails();
                    $("#modalagentMarkup").modal("hide");
                    Swal.fire({
                        title: "Success",
                        text: result.message,
                        icon: "success",
                    });
                }
            } else {
                console.log("Form validation failed.");
            }
        } catch (e) {
            Swal.fire({
                title: "OOPS!",
                text: e.message,
                icon: "question",
            });
        }
    }

    async function getAirports() {
        try {
            let url = '/flights/airports';
            let response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            response = await response.json();
            console.log(response.data)
            Airports = response.data
        } catch (error) {
            console.error("Error fetching airport names:", error);
            return []; // Return an empty array in case of an error
        }
    }


    async function renderSectors() {

        let remarks = 'cancel this ticket'
        let bookingDetail = row;

        let sector = bookingDetail.SectorJson

        let ans = ``;

        for (let i = 0; i < sector.length; i++) {
            let flight = sector[i];
            ans += `
               <div class="custom-sector">
                    <img src="https://content.airhex.com/content/logos/airlines_${flight.airline_code}_30_30_s.png"/>
                  <div class="custom-sector-info">
                      <h3 class="custom-sector-header">${flight.origin} → ${flight.destination}</h3>
                      <p class="custom-sector-details">
                          Flight: ${flight.airline_code}-${flight.flight_number}<br>
                          Departure: ${flight.departure}<br>
                          Arrival: ${flight.arrival}
                      </p>
                  </div>`;

            if (flight.sector_cancel_status_code === 1) {
                ans += `<h6 onclick="partyPopper()">In Progress</h6>
              </div>
            `
            } else if (flight.sector_cancel_status_code === 2) {
                ans += `<h5>Cancelled</h5>
              </div>
            `
            } else if (flight.sector_cancel_status_code === 3) {
                ans += `<h5>Rejected</h5>
              </div>
            `
            } else {
                ans += `<button class="custom-cancel-btn" onclick="cancel_sector(${bookingDetail.booking_id},'${remarks}',${flight.sector_id})">Cancel</button>
              </div>
            `
            }
        }

        ans += `
      <form id="f1" class="form-container">
  <label for="remarks" class="form-label">Remarks</label>
  <textarea id="remarks" rows="2" cols="50" class="form-textarea" placeholder="Enter your remarks here..."></textarea>
</form>

        `

        document.getElementById("mySectors").innerHTML = ans

    }

    async function renderPartialSectors() {

        let bookingDetail = row;

        let sector = bookingDetail.SectorJson
        let pass = bookingDetail.PassengerJson

        let ans = ``;

        for (let i = 0; i < sector.length; i++) {
            let flight = sector[i];
            ans += `
                <div class="sector">
                <div class="sector-header">
                    <div class="sector-info">
                       <img src="https://content.airhex.com/content/logos/airlines_${flight.airline_code}_30_30_s.png"/>
                        <div class="sector-details">
                            <strong>${flight.origin} → ${flight.destination}</strong>
                            Flight: ${flight.airline_code}-${flight.flight_number} | Departure: ${flight.departure} | Arrival: ${flight.arrival}
                        </div>
                    </div>
                </div>
                <div class="person-list">
  <table class="table">

                    <thead style="background-color: #ec3e3e !important; color: white">
                    <tr>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> Select</th>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> Pax Name</th>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> Pax Type</th>
                    </tr>
                    </thead>
<tbody>
`;

            for (let j = 0; j < pass.length; j++) {
                let single = pass[j];
                if (single.sector_id === flight.sector_id) {
                    <!-- Person 1 -->
                    // ans += `<div class="person-card">
                    //     <i class="fas fa-user person-icon"></i>
                    //     <div class="person-name">${single.first_name} ${single.last_name}</div>
                    //     <div class="person-age">(${single.pax_type})</div>
                    //     <div class="person-age"> <input type="checkbox" id="pax1-sector1" onclick="makePassengersArray(${flight.sector_id}, ${single.booking_detail_id})"></div>
                    // </div>`;

                    ans += `<tr>`;
                    if (parseInt(single.passenger_cancel_status_code) === 1) {
                        ans += `<td class="text-center"><h6 onclick="partyPopper()">In Progress</h6>
             </td>
            `
                    } else if (parseInt(single.passenger_cancel_status_code) === 2) {
                        ans += `<td class="text-center"><h5>Cancelled</h5></td>

            `
                    } else if (parseInt(single.passenger_cancel_status_code) === 3) {
                        ans += `<td class="text-center"><h5>Rejected</h5></td>

            `
                    } else {
                        ans += `<td class="text-center"><input type="checkbox"
                                   onchange="makePassengersArray(${flight.sector_id},${single.booking_detail_id})"/>
                        </td>`;
                    }

                    ans += `<td class="text-center"> ${single.first_name} ${single.last_name}</td>
    <td class="text-center"> ${single.pax_type}</td>
</tr>`

                }
            }
            ans += `
</tbody>
                </table>
</div>
            </div>
            `
        }

        let remarks = 'Please cancel'
        ans += `
       <form id="f1" class="form-container">
  <label for="remarks" class="form-label">Remarks</label>
  <textarea id="remarks" rows="2" cols="50" class="form-textarea" placeholder="Enter your remarks here..."></textarea>
</form>

        `
        document.getElementById("btt").innerHTML = `    <button class="custom-cancel-btn" onclick="cancel(${bookingDetail.booking_id},'${remarks}')">Cancel Ticket</button>`
        document.getElementById("myPersons").innerHTML = ans

    }

    async function renderFull() {

        let bookingDetail = row;

        let sector = bookingDetail.SectorJson
        let pass = bookingDetail.PassengerJson

        let ans = ``;

        for (let i = 0; i < sector.length; i++) {
            let flight = sector[i];
            ans += `
                <div class="sector">
                <div class="sector-header">
                    <div class="sector-info">
                       <img src="https://content.airhex.com/content/logos/airlines_${flight.airline_code}_30_30_s.png"/>
                        <div class="sector-details">
                            <strong>${flight.origin} → ${flight.destination}</strong>
                            Flight: ${flight.airline_code}-${flight.flight_number} | Departure: ${flight.departure} | Arrival: ${flight.arrival}
                        </div>
                    </div>
                </div>
                <div class="person-list">
  <table class="table">

                    <thead style="background-color: #ec3e3e !important; color: white">
                    <tr>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> Pax Name</th>
                     <th style="background-color: #ec3e3e !important;"><i class="fas fa-user-tie"></i> Pax Type</th>
                    </tr>
                    </thead>
<tbody>
`;

            for (let j = 0; j < pass.length; j++) {
                let single = pass[j];
                if (single.sector_id === flight.sector_id) {
                    if (parseInt(single.passenger_cancel_status_code) === 0) {

                        // ans += `<div class="person-card">
                        //     <i class="fas fa-user person-icon"></i>
                        //     <div class="person-name">${single.first_name} ${single.last_name}</div>
                        //     <div class="person-age">(${single.pax_type})</div>
                        //     <div class="person-age"> <input type="checkbox" id="pax1-sector1" onclick="makePassengersArray(${flight.sector_id}, ${single.booking_detail_id})"></div>
                        // </div>`;

                        ans += `<tr><td class="text-center"> ${single.first_name} ${single.last_name}</td>
    <td class="text-center"> ${single.pax_type}</td>
</tr>`
                    }
                }
            }
            ans += `
</tbody>
                </table>
</div>
            </div>
            `
        }

        let remarks = 'Please cancel'

        ans += `
       <form id="f1" class="form-container">
  <label for="remarks" class="form-label">Remarks</label>
  <textarea id="remarks" rows="2" cols="50" class="form-textarea" placeholder="Enter your remarks here..."></textarea>
</form>

        `
        document.getElementById("bttfull").innerHTML = `    <button class="custom-cancel-btn" onclick="cancelFull(${bookingDetail.booking_id},'${remarks}')">Cancel Ticket</button>`
        document.getElementById("myfull").innerHTML = ans

    }

    async function agentLastMinMarkup() {

        let bookingDetail = row;

        // Debugging logs
        // console.log("Booking Details:", bookingDetail);
        // console.log("Last Min Agent Markup:", bookingDetail["last_min_agent_markup"]);


        let agent_LastMin = bookingDetail["last_min_agent_markup"] || "";
        let booking_id = bookingDetail["booking_id"] || "";

        // Update form fields with prefixed values
        document.getElementById("booking_id").value = booking_id;
        document.getElementById("ag_last_markup_value").value = agent_LastMin;

    }


    async function cancel(bookingId, remarks) {
        console.log(partialArray.length)
        let totalCancel = [];
        let booking = row;

        let sector = booking.SectorJson
        let pass = booking.PassengerJson

        console.log(pass);
        if (partialArray.length > 0) {

            let bookingData = {
                "type": "Partial Cancellation",
                "booking_id": bookingId,
                "agent_remarks": document.getElementById("remarks").value
            }

            for (let i = 0; i < partialArray.length; i++) {
                let sector_id = partialArray[i].sector_id;
                let pax_id = partialArray[i].pax_id;


                let matched_sector = sector.find(item => item.sector_id === sector_id);
                let matched_passenger = pass.find(item => item.booking_detail_id === pax_id);

                let paxType =
                    matched_passenger.pax_type === 'Adult' ? 'A' :
                        matched_passenger.pax_type === 'Child' ? 'C' :
                            matched_passenger.pax_type === 'Infant' ? 'I' : 'A';

                let passengerName = `${matched_passenger.first_name} ${matched_passenger.last_name}`;

                const sectorRoute = `${matched_sector.origin.toUpperCase()}/${matched_sector.destination.toUpperCase()}`;


                const travelDate = new Date(matched_sector.departure).toISOString().split('T')[0];

                const bookingDate = new Date(booking.booking_date_time).toISOString().split('T')[0];
                let paxs = {
                    "booking_detail_id": matched_passenger.booking_detail_id,
                    "airline_code": matched_sector.airline_code,
                    "ticket_no": matched_passenger.wy_tkt_no,
                    "pnr_no": matched_passenger.passenger_booking_id,
                    "bill_no": booking.wy_invoice_number,
                    "bill_date": `${bookingDate}`,
                    "travel_date": `${travelDate}`,
                    "pax_type": `${paxType}`,
                    "flight_number": matched_sector.flight_number,
                    "passenger_name": `${passengerName}`,
                    "salutation": `${matched_passenger.salutation}`,
                    "base_fare": parseFloat(matched_passenger.passenger_base_fare),
                    "yq_tax": `${matched_passenger.passenger_yq_tax}`,
                    "k3_tax": `${matched_passenger.passenger_k3_tax}`,
                    "yr_tax": `${matched_passenger.passenger_yr_tax}`,
                    "sector": `${sectorRoute}`,
                    "made_by": `${booking.agent_name}`,
                    "journey": `${(booking.is_domestic) ? 'D' : 'I'}`,
                    "travel_class": 'E',
                    "supplier": `${booking.supplier}`,
                    "fare_type": `${matched_sector.fare_type}`,
                    "airline_pnr": `${matched_sector.gdspnr}`,
                    "additional_tax": `${parseFloat(matched_passenger.passenger_additional_tax)}`,
                    "commission": `${matched_passenger.commission_per_pax}`,
                    "markup_per_pax": parseFloat(matched_passenger.markup_per_pax),
                    "other_tax": parseFloat(matched_passenger.passenger_other_charges),
                    "transaction_fee": parseFloat(matched_passenger.passenger_transaction_fee),
                    "service_fee": parseFloat(matched_passenger.passenger_service_fee),
                    "total_ssr_amount": parseFloat(matched_passenger.passenger_total_ssr_amount),
                    "sector_id": matched_passenger.passenger_sector_id
                }

                totalCancel.push(paxs)
            }

            console.log(totalCancel)

            if (totalCancel.length > 0) {
                let fd = new FormData();

                fd.append("cancelQueue", JSON.stringify(bookingData))
                fd.append("cancelDetails", JSON.stringify(totalCancel))

                let res = await fetch('/flights/partial_cancel', {
                    method: "POST",
                    body: fd
                });

                res = await res.json();

                if (res.error) {
                    alert("problem occurred")
                } else {
                    partyPopper()
                }
            } else {
                alert("already cancelled or requested")
            }
        } else {
            alert("Please select at least one pax")
        }
    }

    async function cancelFull(bookingId, remarks) {
        let totalCancel = [];
        let booking = row; // Assuming 'row' is already defined and contains booking data

        let sector = booking.SectorJson;  // Parsing sector data
        let pass = booking.PassengerJson; // Parsing passenger data

        console.log(pass); // Debugging output

        let bookingData = {
            "type": "Full Cancellation",
            "booking_id": bookingId,
            "agent_remarks": document.getElementById("remarks").value
        };

        // Iterate over all passengers that match the bookingId
        let matched_passengers = pass.filter(item => item.passenger_booking_id === bookingId && parseInt(item.passenger_cancel_status_code) === 0);

        matched_passengers.forEach(matched_passenger => {
            let paxType = matched_passenger.pax_type === 'Adult' ? 'A' :
                matched_passenger.pax_type === 'Child' ? 'C' :
                    matched_passenger.pax_type === 'Infant' ? 'I' : 'A';

            let passengerName = `${matched_passenger.first_name} ${matched_passenger.last_name}`;
            let matched_sector = sector.find(s => s.sector_id === matched_passenger.passenger_sector_id);

            const sectorRoute = `${matched_sector.origin.toUpperCase()}/${matched_sector.destination.toUpperCase()}`;
            const travelDate = new Date(matched_sector.departure).toISOString().split('T')[0];
            const bookingDate = new Date(booking.booking_date_time).toISOString().split('T')[0];

            let paxs = {
                "booking_detail_id": matched_passenger.booking_detail_id,
                "airline_code": matched_sector.airline_code,
                "ticket_no": matched_passenger.wy_tkt_no,
                "pnr_no": matched_passenger.passenger_booking_id,
                "bill_no": booking.wy_invoice_number,
                "bill_date": bookingDate,
                "travel_date": travelDate,
                "pax_type": paxType,
                "flight_number": matched_sector.flight_number,
                "passenger_name": passengerName,
                "salutation": matched_passenger.salutation,
                "base_fare": parseFloat(matched_passenger.passenger_base_fare),
                "yq_tax": matched_passenger.passenger_yq_tax,
                "k3_tax": matched_passenger.passenger_k3_tax,
                "yr_tax": matched_passenger.passenger_yr_tax,
                "sector": sectorRoute,
                "made_by": booking.agent_name,
                "journey": booking.is_domestic ? 'D' : 'I',
                "travel_class": 'E',
                "supplier": booking.supplier,
                "fare_type": matched_sector.fare_type,
                "airline_pnr": matched_sector.gdspnr,
                "additional_tax": parseFloat(matched_passenger.passenger_additional_tax),
                "commission": matched_passenger.commission_per_pax,
                "markup_per_pax": parseFloat(matched_passenger.markup_per_pax),
                "other_tax": parseFloat(matched_passenger.passenger_other_charges),
                "transaction_fee": parseFloat(matched_passenger.passenger_transaction_fee),
                "service_fee": parseFloat(matched_passenger.passenger_service_fee),
                "total_ssr_amount": parseFloat(matched_passenger.passenger_total_ssr_amount),
                "sector_id": matched_passenger.passenger_sector_id
            };

            totalCancel.push(paxs);
        });

        console.log(totalCancel); // Debugging output to verify the total cancellation data

        if (totalCancel.length > 0) {
            let fd = new FormData();
            fd.append("cancelQueue", JSON.stringify(bookingData));
            fd.append("cancelDetails", JSON.stringify(totalCancel));

            let res = await fetch('/flights/partial_cancel', {
                method: "POST",
                body: fd
            });

            res = await res.json();

            if (res.error) {
                alert("Problem occurred");
            } else {
                partyPopper();
            }
        } else {
            alert("already canceled or requested")
        }
    }


    async function cancel_sector(bookingId, remarks, sectorId) {

        console.log(partialArray.length)
        let totalCancel = [];
        let booking = row;

        let sector = booking.SectorJson
        let pass = booking.PassengerJson

        console.log(pass);

        let bookingData = {
            "type": "Sector Cancellation",
            "booking_id": bookingId,
            "agent_remarks": document.getElementById("remarks").value,
            "sector_id": sectorId
        }

        let matched_sector = sector.find(item => item.sector_id === sectorId);
        let matched_pax = pass.filter(item => item.sector_id === sectorId);

        for (let mpax = 0; mpax < matched_pax.length; mpax++) {

            let matched_passenger = matched_pax[mpax]

            let paxType =
                matched_passenger.pax_type === 'Adult' ? 'A' :
                    matched_passenger.pax_type === 'Child' ? 'C' :
                        matched_passenger.pax_type === 'Infant' ? 'I' : 'A';

            let passengerName = `${matched_passenger.first_name} ${matched_passenger.last_name}`;

            const sectorRoute = `${matched_sector.origin.toUpperCase()}/${matched_sector.destination.toUpperCase()}`;


            const travelDate = new Date(matched_sector.departure).toISOString().split('T')[0];

            const bookingDate = new Date(booking.booking_date_time).toISOString().split('T')[0];
            let paxs = {
                "booking_detail_id": matched_passenger.booking_detail_id,
                "airline_code": matched_sector.airline_code,
                "ticket_no": matched_passenger.wy_tkt_no,
                "pnr_no": matched_passenger.passenger_booking_id,
                "bill_no": booking.wy_invoice_number,
                "bill_date": `${bookingDate}`,
                "travel_date": `${travelDate}`,
                "pax_type": `${paxType}`,
                "flight_number": matched_sector.flight_number,
                "passenger_name": `${passengerName}`,
                "salutation": `${matched_passenger.salutation}`,
                "base_fare": parseFloat(matched_passenger.passenger_base_fare),
                "yq_tax": `${matched_passenger.passenger_yq_tax}`,
                "k3_tax": `${matched_passenger.passenger_k3_tax}`,
                "yr_tax": `${matched_passenger.passenger_yr_tax}`,
                "sector": `${sectorRoute}`,
                "made_by": `${booking.agent_name}`,
                "journey": `${(booking.is_domestic) ? 'D' : 'I'}`,
                "travel_class": 'E',
                "supplier": `${booking.supplier}`,
                "fare_type": `${matched_sector.fare_type}`,
                "airline_pnr": `${matched_sector.gdspnr}`,
                "additional_tax": `${parseFloat(matched_passenger.passenger_additional_tax)}`,
                "commission": `${matched_passenger.commission_per_pax}`,
                "markup_per_pax": parseFloat(matched_passenger.markup_per_pax),
                "other_tax": parseFloat(matched_passenger.passenger_other_charges),
                "transaction_fee": parseFloat(matched_passenger.passenger_transaction_fee),
                "service_fee": parseFloat(matched_passenger.passenger_service_fee),
                "total_ssr_amount": parseFloat(matched_passenger.passenger_total_ssr_amount)
            }
            totalCancel.push(paxs)
        }
        console.log(totalCancel)

        if (totalCancel.length > 0) {
            let fd = new FormData();

            fd.append("cancelQueue", JSON.stringify(bookingData))
            fd.append("cancelDetails", JSON.stringify(totalCancel))

            let res = await fetch('/flights/sector_cancel', {
                method: "POST",
                body: fd
            });

            res = await res.json();

            if (res.error) {
                alert("problem occurred")
            } else {
                partyPopper()
            }
        } else {
            alert("already requested or completed")
        }
    }


    async function makePassengersArray(sector, pax) {


        // Find the index of the entry in the array
        const index = partialArray.findIndex(item => item.sector_id === sector && item.pax_id === pax);

        if (index !== -1) {
            // If found, remove the entry
            partialArray.splice(index, 1);
        } else {
            // If not found, add the new entry
            let obj = {
                sector_id: sector,
                pax_id: pax
            };
            partialArray.push(obj);
        }
    }

    function partyPopper() {
        // Hide the modal if it's already open
        $('#modals').modal('hide');
        $('#modalp').modal('hide');
        $('#modalr').modal('hide');

        // Window dimensions
        let W = window.innerWidth;
        let H = window.innerHeight;

        // Get the canvas and context for drawing confetti
        const canvas = document.getElementById("canvas");
        const context = canvas.getContext("2d");
        const maxConfettis = 150;
        const particles = [];

        // Array of possible confetti colors
        const possibleColors = [
            "DodgerBlue", "OliveDrab", "Gold", "Pink", "SlateBlue", "LightBlue",
            "Gold", "Violet", "PaleGreen", "SteelBlue", "SandyBrown", "Chocolate",
            "Crimson"
        ];

        // Helper function to generate random numbers between a range
        function randomFromTo(from, to) {
            return Math.floor(Math.random() * (to - from + 1) + from);
        }

        // Particle class for confetti
        function confettiParticle() {
            this.x = Math.random() * W; // x
            this.y = Math.random() * H - H; // y
            this.r = randomFromTo(11, 33); // radius
            this.d = Math.random() * maxConfettis + 11;
            this.color = possibleColors[Math.floor(Math.random() * possibleColors.length)];
            this.tilt = Math.floor(Math.random() * 33) - 11;
            this.tiltAngleIncremental = Math.random() * 0.07 + 0.05;
            this.tiltAngle = 0;

            this.draw = function () {
                context.beginPath();
                context.lineWidth = this.r / 2;
                context.strokeStyle = this.color;
                context.moveTo(this.x + this.tilt + this.r / 3, this.y);
                context.lineTo(this.x + this.tilt, this.y + this.tilt + this.r / 5);
                return context.stroke();
            };
        }

        // Draw confetti particles on the canvas
        function Draw() {
            const results = [];

            // Request animation frame to keep the animation going
            requestAnimationFrame(Draw);

            // Clear the canvas and draw each confetti particle
            context.clearRect(0, 0, W, window.innerHeight);

            for (let i = 0; i < maxConfettis; i++) {
                results.push(particles[i].draw());
            }

            let particle = {};
            let remainingFlakes = 0;

            // Update the position of each particle
            for (let i = 0; i < maxConfettis; i++) {
                particle = particles[i];

                // Animate confetti
                particle.tiltAngle += particle.tiltAngleIncremental;
                particle.y += (Math.cos(particle.d) + 3 + particle.r / 2) / 2;
                particle.tilt = Math.sin(particle.tiltAngle - i / 3) * 15;

                // Count how many confetti particles are still visible
                if (particle.y <= H) remainingFlakes++;

                // Reset particle when it goes out of view
                if (particle.x > W + 30 || particle.x < -30 || particle.y > H) {
                    particle.x = Math.random() * W;
                    particle.y = -30;
                    particle.tilt = Math.floor(Math.random() * 10) - 20;
                }
            }

            return results;
        }

        // Resize event to update canvas size dynamically
        window.addEventListener(
            "resize", function () {
                W = window.innerWidth;
                H = window.innerHeight;
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            },
            false
        );

        // Create confetti particles
        for (let i = 0; i < maxConfettis; i++) {
            particles.push(new confettiParticle());
        }

        // Initialize the canvas size and start the animation
        canvas.width = W;
        canvas.height = H;
        Draw();

        // Show the modal with the success message and OK button
        $('#popper').modal('show');

        // Add custom HTML for success message and OK button
        $('body').append(`
        <div id="successMessage" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: white; font-size: 2rem; z-index: 9999;">
            <div style="margin-bottom: 20px; font-weight: bold; font-size: 2.5rem;"><span style='font-size:100px;'>&#128512;</span><br>Your Request Submitted Successfully!</div>
            <p>Our Executive will process this request in next 24 hours</p>
            <button id="okButton" style="padding: 10px 20px; font-size: 1rem; background-color: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer;">OK</button>
        </div>
    `);

        // Ensure the canvas is behind all other elements by explicitly setting its z-index
        canvas.style.position = "absolute";
        canvas.style.top = "0";
        canvas.style.left = "0";
        canvas.style.zIndex = "1";  // Canvas stays behind the modal and success message


        // Button click handler to close the modal and reset the background
        $('#okButton').on('click', function () {
            $('#popper').modal('hide');
            $('#successMessage').remove();
            context.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
            window.location.reload()
        });
    }

</script>
</body>
</html>