<!DOCTYPE html>
<html lang="en">
<head>
    <!-- PAGE TITLE HERE -->
    <title>TDO :: Ticketed Bookings</title>
    <%- include('../partials/header2') %>
    <style>
        .rounded-modal {
            border-radius: 15px; /* Adjust value as needed */
            overflow: hidden;    /* Prevents content from spilling over rounded corners */
        }

        body
        {
            background-color: white !important;
        }
        /*.invoice-container {*/
        /*    width: 100%;*/
        /*}*/
        /*h1 {*/
        /*    color: #e74c3c;*/
        /*    text-align: center;*/
        /*    margin-bottom: 20px;*/
        /*}*/
        /*.invoice-header, .invoice-footer {*/
        /*    display: flex;*/
        /*    justify-content: space-between;*/
        /*}*/
        /*.invoice-header div, .invoice-footer div {*/
        /*    width: 45%;*/
        /*}*/
        /*table {*/
        /*    width: 100%;*/
        /*    border-collapse: collapse;*/
        /*    margin-bottom: 20px;*/
        /*}*/
        /*table, th, td {*/
        /*    border: 1px solid #ddd;*/
        /*}*/
        /*th, td {*/
        /*    padding: 10px;*/
        /*    text-align: left;*/
        /*}*/
        /*th {*/
        /*    background-color: #f8f8f8;*/
        /*    color: #333;*/
        /*}*/
        /*.total {*/
        /*    font-size: 1.5em;*/
        /*    color: #e74c3c;*/
        /*    text-align: right;*/
        /*}*/
        .badge {
            padding: 3px 6px;
            border-radius: 3px;
            margin-left: 5px; /* Adjust as needed */
        }

        /* Base for label styling */
        [type="checkbox"]:not(:checked),
        [type="checkbox"]:checked {
            position: absolute;
            left: 0;
            opacity: 0.01;
        }
        [type="checkbox"]:not(:checked) + label,
        [type="checkbox"]:checked + label {
            position: relative;
            padding-left: 2.3em;
            font-size: 1.05em;
            line-height: 1.7;
            cursor: pointer;
        }

        /* checkbox aspect */
        [type="checkbox"]:not(:checked) + label:before,
        [type="checkbox"]:checked + label:before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            width: 1.4em;
            height: 1.4em;
            border: 1px solid #aaa;
            background: #FFF;
            border-radius: .2em;
            box-shadow: inset 0 1px 3px rgba(0,0,0, .1), 0 0 0 rgba(203, 34, 237, .2);
            -webkit-transition: all .275s;
            transition: all .275s;
        }

        /* checked mark aspect */
        [type="checkbox"]:not(:checked) + label:after,
        [type="checkbox"]:checked + label:after {
            content: '\2713';
            position: absolute;
            top: .525em;
            left: .18em;
            font-size: 1.375em;
            color: red;
            line-height: 0;
            -webkit-transition: all .2s;
            transition: all .2s;
        }

        /* checked mark aspect changes */
        [type="checkbox"]:not(:checked) + label:after {
            opacity: 0;
            -webkit-transform: scale(0) rotate(45deg);
            transform: scale(0) rotate(45deg);
        }

        [type="checkbox"]:checked + label:after {
            opacity: 1;
            -webkit-transform: scale(1) rotate(0);
            transform: scale(1) rotate(0);
        }

        /* Disabled checkbox */
        [type="checkbox"]:disabled:not(:checked) + label:before,
        [type="checkbox"]:disabled:checked + label:before {
            box-shadow: none;
            border-color: #bbb;
            background-color: #e9e9e9;
        }

        [type="checkbox"]:disabled:checked + label:after {
            color: #777;
        }

        [type="checkbox"]:disabled + label {
            color: #aaa;
        }

        /* Accessibility */
        [type="checkbox"]:checked:focus + label:before,
        [type="checkbox"]:not(:checked):focus + label:before {
            box-shadow: inset 0 1px 3px rgba(0,0,0, .1), 0 0 0 6px rgba(203, 34, 237, .2);
        }


        .icon1 {
            font-size: 20px;
            color: red;
        }
        .status {
            font-weight: bold;
            color: #007bff; /* blue color */
        }
        .type {
            color: #28a745; /* green color */
        }
        .transaction-details p {
            margin-bottom: 0; /* Ensure paragraphs are inline */
        }

        .table-container {
            overflow-x: auto;
            max-width: 100%;
        }

        .table {
            width: 100%;
            table-layout: auto; /* Changed from fixed to auto for more flexibility */
            border-collapse: collapse;
            white-space: nowrap; /* Prevent wrapping in table cells by default */
        }

        .table th, .table td {
            padding: 5px 5px;
            text-align: left;
            vertical-align: middle;
            font-size: 11px;
            border: 2px solid #ddd;
            word-wrap: break-word;
            overflow-wrap: break-word;
            word-break: break-all; /* Breaks long words without spaces */
        }

        .table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        /* Set specific widths for columns with typically longer text */
        .table td:nth-child(1), /* TDO Reference Id */
        .table td:nth-child(2), /* Total Amount Paid */
        .table td:nth-child(3), /* Ticket Status */
        .table td:nth-child(4), /* Markup By Agent */
        .table td:nth-child(5), /* Departure Airport */
        .table td:nth-child(6), /* Departure Airport */
        .table td:nth-child(7), /* Departure Airport */
        .table td:nth-child(8),
        .table td:nth-child(9)/* Arrival Airport */ {
            min-width: 100px;
            max-width: 100px;
            white-space: normal; /* Allow wrapping for longer text */
        }

        .table th:nth-child(1), /* TDO Reference Id */
        .table th:nth-child(2), /* Total Amount Paid */
        .table th:nth-child(3), /* Ticket Status */
        .table th:nth-child(4), /* Markup By Agent */
        .table th:nth-child(5), /* Departure Airport */
        .table th:nth-child(6), /* Departure Airport */
        .table th:nth-child(7), /* Departure Airport */
        .table th:nth-child(8),  /* Arrival Airport */
        .table td:nth-child(9) {
            min-width: 100px;
            max-width: 100px;
            white-space: normal; /* Allow wrapping for longer text */
        }
        #test{
            min-width: 10px !important;
            max-width: 10px !important;
        }
        .table td img {
            max-width: 30px;
            height: auto;
            vertical-align: middle;
            margin-right: 8px;
        }


        .table1-container {
            overflow-x: auto;
            max-width: 100%;
        }

        .table1 {
            width: 100%;
            table-layout: auto; /* Changed from fixed to auto for more flexibility */
            border-collapse: collapse;
            white-space: nowrap; /* Prevent wrapping in table cells by default */
        }

        .table1 th, .table1 td {
            padding: 5px 5px;
            text-align: left;
            vertical-align: middle;
            font-size: 11px;
            border: 2px solid #ddd;
            word-wrap: break-word;
            overflow-wrap: break-word;
            word-break: break-all; /* Breaks long words without spaces */
        }

        .table1 th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        /* Set specific widths for columns with typically longer text */
        .table1 td:nth-child(1), /* TDO Reference Id */
        .table1 td:nth-child(2)
        {
            min-width: 30px;
            max-width: 30px;
            white-space: normal; /* Allow wrapping for longer text */
        }
        .table1 td:nth-child(3), /* Ticket Status */
        .table1 td:nth-child(4), /* Markup By Agent */
        .table1 td:nth-child(5), /* Departure Airport */
        .table1 td:nth-child(6), /* Departure Airport */
        .table1 td:nth-child(7), /* Departure Airport */
        .table1 td:nth-child(8),
        .table1 td:nth-child(9)/* Arrival Airport */ {
            min-width: 100px;
            max-width: 100px;
            white-space: normal; /* Allow wrapping for longer text */
        }

        .table1 th:nth-child(1), /* TDO Reference Id */
        .table1 th:nth-child(2)
        {
            min-width: 30px;
            max-width: 30px;
            white-space: normal; /* Allow wrapping for longer text */
        }
        .table1 th:nth-child(3), /* Ticket Status */
        .table1 th:nth-child(4), /* Markup By Agent */
        .table1 th:nth-child(5), /* Departure Airport */
        .table1 th:nth-child(6), /* Departure Airport */
        .table1 th:nth-child(7), /* Departure Airport */
        .table1 th:nth-child(8),  /* Arrival Airport */
        .table1 td:nth-child(9) {
            min-width: 100px;
            max-width: 100px;
            white-space: normal; /* Allow wrapping for longer text */
        }
        #test{
            min-width: 10px !important;
            max-width: 10px !important;
        }
        .table1 td img {
            max-width: 30px;
            height: auto;
            vertical-align: middle;
            margin-right: 8px;
        }

        .nowrap {
            white-space: nowrap; /* Prevent wrapping for specific short text */
        }

        @media (max-width: 768px) {
            .table th, .table td {
                font-size: 6px;
                padding: 6px;
            }
            .table td:nth-child(1), .table td:nth-child(3),
            .table td:nth-child(6), .table td:nth-child(7) {
                min-width: 80px;
                max-width: 120px;
            }
        }

        /* Styling the table title */
        h5 {
            background-color: #ec3e3e;
            border-radius: 12px;
            padding: 5px;
            font-family: Arial, sans-serif;
            color: white;
            text-align: left;
            margin-bottom: 15px;
        }

        .print-button {

            margin: 8px;
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82)); /* Green gradient */
            color: #fff;
            padding: 5px 5px;
            font-size: 12px;
            font-weight: bold;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow */
            transition: all 0.3s ease;
        }

        .icons {
            font-size: 1.4em;
            margin-right: 5px;
        }

        .print-button:hover {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82)); /* Lighter green on hover */
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px); /* Subtle lift effect */
        }

        .print-button:active {
            background: linear-gradient(135deg, #ec3e3e, rgba(236, 62, 62, 0.82));
            transform: translateY(0); /* Reset lift effect on click */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .radio-group {
            display: flex;
            gap: 20px; /* Space between options */
            flex-wrap: wrap;
        }

        .radio-option {
            display: flex;
            align-items: center;
            background-color: #f2f2f2;
            padding: 10px 15px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            transition: background-color 0.3s ease;
        }

        .radio-option input[type="radio"] {
            display: none; /* Hide default radio button */
        }

        .radio-option i {
            font-size: 20px;
            color: #4CAF50;
            margin-right: 8px;
        }

        .radio-option .price {
            margin-left: auto;
            color: #4CAF50;
            font-weight: bold;
        }

        .radio-option:hover {
            background-color: #e0e0e0;
        }

        .radio-option input[type="radio"]:checked + i {
            color: #388E3C; /* Change icon color when selected */
        }

        .radio-option input[type="radio"]:checked + span {
            color: #388E3C; /* Change text color when selected */
        }

        @page {
            size: portrait;
            margin: 25px;
        }

        @media print {

            /* Reset body padding and margin for better fit */
            body {
                margin: 40px !important;
                padding: 0;
                font-size: 10px !important; /* Default font size for print */
            }



            .container-fluid {
                width: 100%;               /* Set width to 90% */
                   /* Set a maximum width for the content */
                margin: 0 auto;           /* Center the container horizontally */
                padding: 5px;            /* Add padding around the content */
            }

            /* Apply uniform margins to the entire page */


            /* Adjust font size for ticket content */
            .ticket-content {
                font-size: 10px; /* Adjust ticket content font size */
                line-height: 1.4; /* Improve line spacing for readability */
            }

            /* Table adjustments for print */
            .table {
                width: 100%;
                table-layout: fixed; /* Ensure tables fit */
                font-size: 10px !important; /* Adjust table text size */
                margin-bottom: 20px; /* Ensure tables don't overflow */

            }

            .table th, .table td {
                padding: 8px; /* Decrease padding to save space */
                text-align: left;
                font-size: 10px !important;
                vertical-align: middle;
                border: 1px solid #ddd;
            }

            .table1 {
                width: 100%;

                font-size: 10px !important; /* Adjust table text size */
                margin-bottom: 20px; /* Ensure tables don't overflow */

            }

            .table1 th:nth-child(1)
            {
                min-width: 80px;
                max-width: 80px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 td:nth-child(1)
            {
                min-width: 80px;
                max-width: 80px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 th:nth-child(2)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 td:nth-child(2)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 th:nth-child(3)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 td:nth-child(3)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 th:nth-child(4)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }

            .table1 td:nth-child(4)
            {
                min-width: 60px;
                max-width: 60px;
                white-space: normal; /* Allow wrapping for longer text */
            }




            /* Page breaks for large content */
            /* Ensure body has no padding or margin */


            /* Adjust container styles to fit within the print margins */


            /* Set uniform padding for rows */
            .row {
                margin: 0;
                padding: 0;
            }



            /* Ensure images and logos fit within the page */
            img {
                max-width: 100%; /* Ensure images scale down */
                height: auto;
            }

            /* Hide unnecessary elements like buttons and modals during print */
            .print-button, .modal, .footer {
                display: none;
            }

            /* Optional: adjust page margins for print */
        }
        .row {
            display: flex;
            /*flex-wrap: wrap;*/
        }
        ol li {
            text-align: left;
            margin-bottom: 1px;
            font-size: 10px;
        }

        ol {
            margin-bottom: 0.5em;
        }

        .icon-flights {
            width: 40px;
            margin: auto;
            float: left;
            color: red;
        }

        .icon-flights-green {
            width: 40px;
            margin: auto;
            float: left;
            color: green;
        }
    </style>
</head>
<body onload="showBookingDetails(`<%=id%>`, `<%=type%>`)">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-lg-6 col-sm-6" id="logo">

                </div>
                <div class="col-lg-6 col-sm-6" id="agentDetails">
                </div>
            </div>
            <div id="result">
                <i class="spinner-grow"></i>
            </div>

                <h5>Important Information</h5>

            <div class="row border-bottom border-black p-2 mb-4">
                <div class="col-lg-12 col-sm-12">
                    <ol>
                        <li>1 - You must web check-in on the airline website and obtain a boarding pass.</li>
                        <li>2 - Reach the terminal at least 2 hours prior to the departure for domestic flight and 4 hours prior to the departure of international flight.</li>
                        <li> 3 - For departure terminal please check with the airline first.</li>
                        <li> 4 - Date & Time is calculated based on the local time of the city/destination.</li>
                        <li> 5 - Use the Airline PNR for all Correspondence directly with the Airline</li>
                        <li> 6 - For rescheduling/cancellation within 4 hours of the departure time contact the airline directly</li>
                        <li> 7 - Your ability to travel is at the sole discretion of the airport authorities and we shall not be held responsible.</li>
                    </ol>
                </div>
            </div>
            <div class="row text-center">
                <div class="col-lg-7 col-sm-7 border-right">
                    <div class="row mb-2">
                        <div class="col-lg-4 col-sm-4 text-end">
                            <i class="fa-solid fa-xmark text-danger fs-1"></i>
                        </div>
                        <div class="col-lg-8 col-sm-8 text-start fw-bold">
                            The items are Dangerous Goods and are not permitted<br/> to be carried as Hand/Check-In Baggage
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-lg-2 col-sm-2 offset-lg-1 offset-sm-1">
                            <img src="/images/icons/lighter.svg" class="icon-flights"/>
                            <div>Lighters</div>
                        </div>
                        <div class="col-lg-2 col-sm-2">
                            <img src="/images/icons/flammableLiquid.png" class="icon-flights"/><br/>
                            Flammable<br/>Liquids
                        </div>
                        <div class="col-lg-2 col-sm-2">
                            <img src="/images/icons/toxic.webp" class="icon-flights"/><br/> Toxic
                        </div>
                        <div class="col-lg-2 col-sm-2">
                            <img src="/images/icons/bleach.svg" class="icon-flights"/><br/> Bleach
                        </div>
                        <div class="col-lg-2 col-sm-2">
                            <img src="/images/icons/explosive.svg" class="icon-flights"/><br/> Explosives
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-lg-2 col-sm-2 offset-lg-1 offset-sm-1">
                            <img src="/images/icons/virus.svg" class="icon-flights"/><br/> Infectious<br/>Substances
                        </div>
                        <div class="col-lg-2 col-sm-2 ">
                            <img src="/images/icons/pepper-spray.webp" class="icon-flights"/><br/>
                            Pepper<br/>Spray
                        </div>
                        <div class="col-lg-2 col-sm-2 ">
                            <img src="/images/icons/radioactive.svg" class="icon-flights"/><br/>
                            RadioActive Materials
                        </div>
                        <div class="col-lg-2 col-sm-2 ">
                            <img src="/images/icons/flammableGas.png" class="icon-flights"/><br/>
                            Flammable<br/>Gas
                        </div>
                        <div class="col-lg-2 col-sm-2 ">
                            <img src="/images/icons/corrosive.png" class="icon-flights"/><br/> Corrosive
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-sm-5">
                    <div class="row mb-2">
                        <div class="col-lg-4 col-sm-4 text-end">
                            <i class="fa-solid fa-check text-success fs-1"></i>
                        </div>
                        <div class="col-lg-8 col-sm-8 text-start fw-bold">
                            Items allowed only in Hand Baggage
                        </div>
                    </div>
                    <div class="row text-center mt-2 mb-2">
                        <div class="col-lg-3 col-sm-3 text-center offset-lg-3 offset-sm-3">
                            <img src="/images/icons/powerbank.jpg" class="icon-flights-green bg-white"/><br/>
                            Power Banks
                        </div>
                        <div class="col-lg-3 col-sm-3 offset-lg-1 offset-sm-1">
                            <img src="/images/icons/lithiumBattery.svg" class="icon-flights-green"/><br/>
                            Lithium Batteries
                        </div>
                    </div>
                </div>
            </div>
        </div>

    <div class="">
        <!-- Your content -->
        <div class="footer out-footer">
            <div class="copyright">
                <p>Copyright
                    <script>document.write(new Date().getFullYear())</script>
                    © Developed by <a href="https://veenusmindmedia.com/" target="_blank">Veenus Mind Media</a>
                </p>
            </div>
        </div>
    </div>

<div class="modal fade" id="modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg bg-white rounded-modal">
        <div class="modal-content ">
            <div class="modal-header">
                <h6 class="modal-title" id="staticBackdropLabel">Select Types Of Ticket</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body table-container" id="myans">


                <!--                <div class="row text-center">-->
                <!--                     <div class="col-6">-->
                <!--                         <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal">  <i class="fas fa-user-tie"></i>  With Agent Without Price</button>-->
                <!--                     </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;"  data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-tie"></i> With Agent With Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent Without Price</button>-->
                <!--                    </div>-->
                <!--                    <div class="col-6">-->
                <!--                        <button class="print-button" style="font-size: 18px !important;" data-bs-toggle="modal" data-bs-target="#modal"> <i class="fas fa-user-slash"></i> Without Agent With Price</button>-->
                <!--                    </div>-->
                <!--                </div>-->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Required vendors -->
<script>
    let row = [];
    let Airports = [];

    function formatDuration(duration) {
        let [hours, minutes] = duration.split(":").map(Number);
        let formattedDuration = `${hours > 0 ? hours + " hrs " : ""}${minutes > 0 ? minutes + " mins" : ""}`.trim();
        return formattedDuration || "0 mins";
    }

    async function getAirlineNames() {
        try {
            let url = '/flights/airlines';
            let response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            response = await response.json();
            console.log(response.data)
            Airlines = response.data
        } catch (error) {
            console.error("Error fetching airport names:", error);
            return []; // Return an empty array in case of an error
        }
    }


    async function showBookingDetails(id, type) {
        getAirports().then(async () => {
            await getAirlineNames();
            if (type === 'ai' || type === 'ae') {
                fetchAgDetails(`<%= agentEmail %>`);
            }
            let formData = new FormData();
            formData.append("bookingId", id);

            let res = await fetch('/flights/getTicketDetails', {
                method: "POST",
                body: formData
            });

            res = await res.json();
            console.log(res);
            let row = res.response[0];
            let bookingDetail = row;
            let sector = bookingDetail.SectorJson;
            let pass = bookingDetail.PassengerJson;
            let segment = bookingDetail.SegmentJson;
            let ans = ``;

            ans += `
<h5>Booking Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">Reference Id</th>
                <th class="text-center">Booked On</th>
                <th class="text-center">Trip Type</th>
                <th class="text-center">Journey</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center">${row.booking_id}</td>
                <td class="text-center">
  ${new Date(row.booking_date_time).toLocaleDateString('en-GB', {day: 'numeric', month: 'short', year: 'numeric'})} <br>
  ${new Date(row.booking_date_time).toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit', hour12: false})} Hrs
</td>
                <td class="text-center">${row.trip_type}</td>
                <td class="text-center">${(row.is_domestic) ? 'DOMESTIC' : 'INTERNATIONAL'}</td>
            </tr>
        </tbody>
    </table>
</div>
`;

            let hasSingleStop = 0;
            for (let trip = 0; trip < sector.length; trip++) {
                let flight = sector[trip];
                if (flight.stops !== 0) {
                    hasSingleStop = 1;
                }
                let airline = Airlines.find(a => a.Code === flight.airline_code);
                let airlineName = airline ? airline.Name : flight.airline_code;
                let Dairline = Airports.find(a => a.AirportCode === flight.departure_airport_name);
                let Aairline = Airports.find(a => a.AirportCode === flight.arrival_airport_name);
                let DepartureCityName = Dairline ? Dairline.CityName : flight.airline_code;
                let ArrivalCityName = Aairline ? Aairline.CityName : flight.airline_code;
                let DepartureAirportName = Dairline ? Dairline.AirportName : flight.departure_airport_name;
                let ArrivalAirportName = Aairline ? Aairline.AirportName : flight.arrival_airport_name;

                let allSegments = segment.filter(item => item.sector_id === flight.sector_id);

                ans += `
<h5 style="display: flex; justify-content: space-between;  align-items: center;">
  <span style="font-size: 12px">(${flight.departure_airport_code} - ${flight.arrival_airport_code})</span> &nbsp;&nbsp;
    <span>
        ${(trip === 0)
                    ? '<img src="/images/1.png" style="width: 350px;">'
                    : '<img src="/images/2.png" style="width: 350px;">'}
    </span>
    <span style="margin-left: auto; font-size: 10px">
        Duration: ${flight.duration}
    </span>
</h5>
<div class="table1-container">
  <table class="table1">
 <thead>
            <tr>
                <th class="text-center">Flight</th>
                <th class="text-center">PNR</th>
                <th class="text-center">Departure</th>
                <th class="text-center">Arrival</th>
                <th class="text-center">Departure Airport</th>
                <th class="text-center">Arrival Airport</th>
                <th class="text-center">Duration</th>
            </tr>
        </thead>
        <tbody>`;
                for (let seg = 0; seg < allSegments.length; seg++) {
                    let singleSegment = allSegments[seg];

                    ans += `
           <tr style="text-align: center">
<td class="nowrap text-center">
        <img src="https://content.airhex.com/content/logos/airlines_${singleSegment.airline_code}_30_30_s.png"/>
<br>${airlineName}<br>(${singleSegment.airline_code}-${singleSegment.flight_number})</td>
</td>
<td class="nowrap text-center">${flight.gdspnr}</td>
<td class="nowrap text-center">
${new Date(singleSegment.departure).toLocaleDateString('en-GB', {day: 'numeric', month: 'short', year: 'numeric'})} <br>
${new Date(singleSegment.departure).toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit', hour12: false})} Hrs
</td>
<td class="nowrap text-center">
${new Date(singleSegment.arrival).toLocaleDateString('en-GB', {day: 'numeric', month: 'short', year: 'numeric'})} <br>
${new Date(singleSegment.arrival).toLocaleTimeString('en-GB', {hour: '2-digit', minute: '2-digit', hour12: false})} Hrs
</td>
<td class="nowrap text-center">${DepartureAirportName}(${DepartureCityName})<br> Terminal: ${singleSegment.departure_terminal}</td>
<td class="nowrap text-center">${ArrivalAirportName}(${ArrivalCityName})<br> Terminal: ${singleSegment.arrival_terminal}</td>`;
                    if (singleSegment.layover_time === 'NO_LAYOVER') {
                        ans += `<td class="nowrap text-center">  <div class="duration">
        <span>Flight Duration</span>
        <p><span class="icons">&#x2708;</span> ${formatDuration(singleSegment.duration)}</p>
    </div></td>`;
                    } else {
                        ans += `<td class="nowrap text-center">
    <div class="duration">
        <span>Flight Duration</span>
        <p><span class="icons">&#x2708;</span> ${formatDuration(singleSegment.duration)}</p>
    </div>
    <div class="layover text-center">
        <span >Layover Time</span>
        <p><span class="icons">&#9203;</span> ${formatDuration(singleSegment.layover_time)}</p>
    </div>
</td>`;
                    }
                    ans += `</tr>`;
                }
                ans += `<tr>
            <td colspan="7">
                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr style="background-color: #007bff;">
                                <th style="width: 20%" class="text-center">Sr. No & Name</th>
                                <th class="text-center">Pax Type</th>
                                <th class="text-center">Ticket Number</th>
                                <th class="text-center">Extra Meal</th>
                                <th class="text-center">Extra Baggage/Seat</th>
                            </tr>
                        </thead>
                        <tbody>`;

                let passengerMap = new Map();
                let paxes = pass.filter(item => item.sector_id === flight.sector_id);

                paxes.forEach(passenger => {
                    let key = `${passenger.first_name}${passenger.last_name}`;
                    if (!passengerMap.has(key)) {
                        passengerMap.set(key, {
                            salutation: passenger.salutation,
                            first_name: passenger.first_name,
                            last_name: passenger.last_name,
                            pax_type: passenger.pax_type,
                            ticket_no: [],
                            meals: [],
                            baggages: [],
                            seats: []
                        });
                    }
                    let ticketList = passengerMap.get(key).ticket_no;
                    if (!ticketList.includes(passenger.ticket_no)) {
                        ticketList.push(passenger.ticket_no);
                    }
                    if (passenger?.ssr_data?.length > 0) {
                        let meals = passenger.ssr_data.filter(item => item.ssr_type === 'meal');
                        let baggages = passenger.ssr_data.filter(item => item.ssr_type === 'Baggage');
                        let seats = passenger.ssr_data.filter(item => item.ssr_type === 'Seat');
                        meals.forEach(meal => passengerMap.get(key).meals.push(meal));
                        baggages.forEach(baggage => passengerMap.get(key).baggages.push(baggage));
                        seats.forEach(seat => passengerMap.get(key).seats.push(seat));
                    }
                });

                let paxIndex = 1;
                passengerMap.forEach((data, key) => {
                    ans += `
            <tr style="text-align: center;">
                <td class="text-center">${paxIndex++} - ${data.salutation} ${data.first_name} ${data.last_name}</td>
                <td class="text-center">${data.pax_type}</td>
                <td class="text-center">${data.ticket_no.join(', ')}</td>
                <td class="text-center">
                    ${data.meals.length > 0 ? data.meals.map(m => `${m.origin || 'Nil'} - ${m.destination || 'Nil'}: <br> ${m.description || 'Nil'}`).join('<br>') : 'Nil'}
                </td>
                <td class="text-center" style="padding: 10px; border: 1px solid #ccc;">
                    ${data.baggages.length > 0 ? data.baggages.map(b => `${b.origin || 'Nil'} - ${b.destination || 'Nil'}: <br>${b.description || 'Nil'}`).join('<br>') : 'Nil'}
                    <br><br>
                       ${data.seats.length > 0 ? data.seats.map(b => `${b.origin || 'Nil'} - ${b.destination || 'Nil'}: <br>${b.description || 'Nil'}`).join('<br>') : 'Nil'}
                </td>
            </tr>
        `;
                });

                ans += `
                        </tbody>
                    </table>
                </div>
            </td>
        </tr>
 </tbody>
    </table>
</div>
`;
            }

            if (type === 'ai' || type === 'wi') {
                ans += `<h5>Payment Details</h5>
<div class="table-container">
    <table class="table">
        <thead>
            <tr>
                <th class="text-center">Platform Fee</th>
                <th class="text-center">Platform Tax</th>
                <th class="text-center">Gateway Charges</th>
                <th class="text-center">Total Amount Paid</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="text-center">${row.platform_fee}</td>
                <td class="text-center">${row.platform_tax}</td>
                <td class="text-center">${row.gateway_charges}</td>
                <td class="text-center">${parseFloat(row.customer_amount) + parseFloat(row.last_min_agent_markup)}</td>
            </tr>
        </tbody>
    </table>
</div>`;
            }

            document.getElementById("result").innerHTML = ans;

            // Use setTimeout to ensure the content is fully rendered before printing
            setTimeout(() => {
                window.print();
            }, 500); // Adjust the delay as needed
        });
    }

    async function getAirports() {
        try {
            let url = '/flights/airports';
            let response = await fetch(url);

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            response = await response.json();
            console.log(response.data)
            Airports = response.data
        } catch (error) {
            console.error("Error fetching airport names:", error);
            return []; // Return an empty array in case of an error
        }
    }


    const fetchAgDetails = (agent) => {
        fetch(`/flights/agentDetails/${agent}`)
            .then(res => res.json())
            .then(res => {
                if (!res.response || res.response.length === 0) {
                    console.error("No agent details found.");
                    return;
                }

                let ans = res.response[0];
                console.log(ans);

                let agentDetails = `
                <span class="fw-bold text-uppercase fs-2" style="font-size: 14px !important;">
                    ${ans.establishment_name || "N/A"}
                </span><br/>
                <span class="fs-4" style="font-size: 10px !important;">
                    Email: ${ans.email || "Not available"} <br/>
                    +${ans.mobile || "Not available"}<br/>
                    ${ans.address || "Address not provided"}
                </span>`;

                document.getElementById("agentDetails").innerHTML = agentDetails;

                // Show logo only if it exists, otherwise clear the logo div
                document.getElementById("logo").innerHTML = ans.logo && ans.logo.trim()
                    ? `<img src='/${ans.logo}' class='img-fluid' style="height:100px;width:100px" alt="Logo"/>`
                    : "";
            })
            .catch(error => console.error("Error fetching agent details:", error));
    };


    async function triggerPrint() {
        window.print();
    }



    function formatDate(dateTimeString) {
        let date = new Date(dateTimeString);

        // Use UTC methods to avoid timezone conversion
        let day = String(date.getUTCDate()).padStart(2, '0');
        let month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        let year = date.getUTCFullYear();

        let hours = String(date.getUTCHours()).padStart(2, '0');
        let minutes = String(date.getUTCMinutes()).padStart(2, '0');
        let seconds = String(date.getUTCSeconds()).padStart(2, '0');

        // Combine date and time in dd/mm/yyyy hh:mm:ss format
        return `${day}/${month}/${year} <br> ${hours}:${minutes}:${seconds}`;
    }

    function formatDateTime(dateTimeString) {
        let date = new Date(dateTimeString);

        // Extract date components using local time methods
        let day = String(date.getDate()).padStart(2, '0');
        let month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        let year = date.getFullYear();

        // Extract time components using local time methods
        let hours = String(date.getHours()).padStart(2, '0');
        let minutes = String(date.getMinutes()).padStart(2, '0');
        let seconds = String(date.getSeconds()).padStart(2, '0');

        // Combine date and time in the desired format
        return `${day}/${month}/${year} <br> ${hours}:${minutes}:${seconds}`;
    }
</script>
</body>
</html>